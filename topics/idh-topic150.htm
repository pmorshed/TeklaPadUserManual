<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Extended API (xAPI)</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: White;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?fc61ebf6"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 150;
</script>
</head>
<body>
<div align="center">
  <table class="tbl6">
    <tr class="row0">
      <td class="cell6">
        <p class="ps0"><span class="ts0">&nbsp;</span></p>
      </td>
      <td class="cell7">
        <div align="center">
          <table class="tbl0">
            <tr class="row0">
              <td class="cell1">
                <p class="ps1"><span class="ts1">Navigation: </span><a href="idh-topic80.htm" class="hs0">Tab1: Tekla Database</a><span class="ts1">&nbsp;&gt; </span></p>
                <p class="ps2"><img width="16" height="16" border="0" src="images/pubclass.gif" /><span class="ts2">&nbsp;Extended API (</span><span class="ts75">x</span><span class="ts2">API)</span></p>
              </td>
              <td class="cell2">
                <p class="ps3"><a href="idh-topic80.htm" title="User Interface" class="hs0">Previous</a><span class="ts1">&nbsp;</span><a href="idh-topic180.htm" title="Samples" class="hs0">Next</a></p>
              </td>
            </tr>
          </table>
        </div>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts51">&nbsp;</span></p>
<p class="ps22"><img width="253" height="143" border="0" src="images/image(1).png" /></p>
<p class="ps20"><span class="ts17">&nbsp;</span></p>
<p class="ps46"><img width="16" height="16" border="0" src="images/pubproperty.gif" /><span class="ts56">: </span><span class="ts76">Property&nbsp;&nbsp;&nbsp; </span><img width="16" height="11" border="0" src="images/pubmethod.gif" /><span class="ts76">: Public Method&nbsp;&nbsp;&nbsp; </span><img width="13" height="10" border="0" src="images/static.gif" /><span class="ts76">: Static&nbsp;&nbsp; </span><img width="12" height="11" border="0" src="images/dxftype.png" /><span class="ts76">: External(</span><a href="https://github.com/haplokuon/netDxf" target="_blank" class="hs7">netDxf</a><span class="ts76">)&nbsp;&nbsp; </span><img width="11" height="11" border="0" src="images/ifctype.png" /><span class="ts76">: External (</span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs7">GeometryGymIfc</a><span class="ts76">)</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps19"><span class="ts64">Properties:</span></p>
<div class="block2" align="left">
  <table class="tbl7">
    <tr class="row0">
      <td class="cell0">
        <p class="ps47"><span class="ts77">&nbsp; </span></p>
      </td>
      <td class="cell1">
        <p class="ps48"><span class="ts78">Name</span></p>
      </td>
      <td class="cell2">
        <p class="ps48"><span class="ts78">Description</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="16" border="0" src="images/pubproperty.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_MAINDB" class="hs7">Database</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This is a predefined variable which is responsible for storing the current user selection. After selecting of any area in model, the related data will be stored in this variable automatically and can be used in your query body.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="16" border="0" src="images/pubproperty.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_NDDB" class="hs7">DrawingDatabase</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This is a predefined variable which is responsible for storing the current user selection in a drawing. After selecting of any area in drawing, the related data will be stored in this variable automatically and can be used in your query body</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="16" border="0" src="images/pubproperty.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_EDRAWING" class="hs7">EntireDrawing</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This is a predefined variable which returns </span><span class="ts81">all</span><span class="ts79">&nbsp;drawing objects in current drawing (regardless of selected objects in drawing). It a</span><span class="ts82">lso includes hidden parts. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="16" border="0" src="images/pubproperty.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_EMODEL" class="hs7">EntireModel</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This is a predefined variable which returns </span><span class="ts81">all</span><span class="ts79">&nbsp;model objects in current model (regardless of selected objects in model). It a</span><span class="ts82">lso includes hidden or filtered parts. </span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps51">&nbsp;</p>
<p class="ps19"><span class="ts64">Methods:</span></p>
<div class="block2" align="left">
  <table class="tbl7">
    <tr class="row0">
      <td class="cell0">
        <p class="ps47"><span class="ts77">&nbsp; </span></p>
      </td>
      <td class="cell1">
        <p class="ps48"><span class="ts78">Name</span></p>
      </td>
      <td class="cell2">
        <p class="ps48"><span class="ts78">Description</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="12" height="11" border="0" src="images/dxftype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_AllEntities" class="hs7">AllEntities</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts83">Returns </span><span class="ts83">all DXF document entities from one or all layers.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_AngleBeam" class="hs7">AngleWithBeam</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts83">Returns the minimum angle (in degree) with other beam. The result would be between 0 and 90 degree.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_AngleVector" class="hs7">AngleWithVector</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts84">Returns the minimum angle (in degree) with </span><span class="ts84">the given vector</span><span class="ts84">. The result would be between 0 and 90 degree.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_AngleZ" class="hs7">AngleWithZ</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts84">Returns the minimum angle (in degree) with current work plane's Z-Axis. The result would be between 0 and 90 degree.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Safe </span><span class="ts82">(without run-time exception) </span><span class="ts82">convert to </span><span class="ts85">DateTime</span><span class="ts82">&nbsp;objects. Returns default value when conversion fails.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Safe (without run-time exception) c</span><span class="ts82">onvert to </span><span class="ts85">double-precision</span><span class="ts82">&nbsp;number. </span><span class="ts82">Returns 0 </span><span class="ts82">(by default) </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_AImage" class="hs7">AsImage</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New) </span><span class="ts82">Safe (without run-time exception) c</span><span class="ts82">onvert to</span><span class="ts82">&nbsp;image byte array (byte[]). </span><span class="ts82">Returns </span><span class="ts82">default image </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Safe (without run-time exception) c</span><span class="ts82">onvert to </span><span class="ts85">integer</span><span class="ts82">&nbsp;number. </span><span class="ts82">Returns 0 </span><span class="ts82">(by default) </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_FindParts" class="hs7">FindPartsAround</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts83">Returns list of parts around the current part.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetArray" class="hs7">GetArray</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Converts&nbsp; an enumerable (or an enumerator) to array.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Get1ContourPoint" class="hs7">GetContourPoint</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Converts </span><span class="ts82">a</span><span class="ts82">&nbsp;point to </span><span class="ts82">a </span><span class="ts82">contour point</span><span class="ts82">. (You can use </span><a href="idh-topic150.htm#TB1_Get1Point" class="hs7">GetPoint</a><span class="ts82">&nbsp;for reversed conversion )</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ContourPointList" class="hs7">GetContourPointList</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Gets</span><span class="ts82">&nbsp;collection of</span><span class="ts82">&nbsp;</span><span class="ts82">contour point</span><span class="ts82">s.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="12" height="11" border="0" src="images/dxftype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_FindDxfDesc" class="hs8">GetDescription</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New) </span><span class="ts82">Returns</span><span class="ts82">&nbsp;description of layer based on the DXF document</span><span class="ts82">.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetField" class="hs7">GetField</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns row data stored in the column specified by index (that starts from zero) or column name.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetFieldT" class="hs7">GetField&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New) </span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_GetField" class="hs7">GetField</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GIfcData" class="hs7">GetIfcData</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets text value of IFC object's property or quantity</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GIfcDataT" class="hs7">GetIfcData&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New) </span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_GIfcData" class="hs7">GetIfcData</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GIfcMat" class="hs7">GetIfcMaterialData</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets complete material data associated with the </span><span class="ts82">I</span><span class="ts82">FC bject</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcProp" class="hs7">GetIfcProperty</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets IFC object's property with name of property</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcPropSet" class="hs7">GetIfcPropertySet</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets IFC object's property set with name of set</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcPropSets" class="hs7">GetIfcPropertySets</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets list of all property sets associated with the IFC object</span><span class="ts82">&nbsp;</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcQnt" class="hs7">GetIfcQuantity</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets IFC object's quantity with name of quantity</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcQntSet" class="hs7">GetIfcQuantitySet</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets IFC object's quantity set (Element quantity) with name of set</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GifcQntSets" class="hs7">GetIfcQuantitySets</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts87">&nbsp;</span><span class="ts82">Gets list of all quantity sets (Element Quantities) associated with the IFC object</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_DR2MODEL2" class="hs7">GetModelObjectOfType&lt;T&gt;</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">This function takes a single drawing object (from</span><span class="ts85">&nbsp;TSD&nbsp;</span><span class="ts82">namespace) and retrieves related object (of type &quot;T&quot;) in model.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_DR2MODEL" class="hs7">GetModelObjectsOfType&lt;T&gt;</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">This function takes drawing object collection and retrieves related object collection (of type &quot;T&quot;) in model.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetNormalVector" class="hs7">GetNormalVector</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns the </span><span class="ts82">normal</span><span class="ts82">&nbsp;vector of the contour plate.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Get1Point" class="hs7">GetPoint</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Converts </span><span class="ts82">a</span><span class="ts82">&nbsp;contour point to </span><span class="ts82">a </span><span class="ts82">point</span><span class="ts82">. (You can use </span><a href="idh-topic150.htm#TB1_Get1ContourPoint" class="hs7">GetContourPoint</a><span class="ts82">&nbsp;for reversed conversion )</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_PointList" class="hs7">GetPointList</a><span class="ts82">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Gets</span><span class="ts82">&nbsp;collection of</span><span class="ts82">&nbsp;</span><span class="ts82">point</span><span class="ts82">s.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_DRAWINGS" class="hs7">GetSelectedDrawings</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns</span><span class="ts79">&nbsp;the collection of selected drawings (in document manager / drawing list)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_POUT" class="hs7">GetTeklaPullOut</a><span class="ts82">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns</span><span class="ts79">&nbsp;pull-out picture for numbered&nbsp;reinforcements.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GTR" class="hs7">GetTeklaReport</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns</span><span class="ts79">&nbsp;predefined Tekla template properties from model objects.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GTRT" class="hs7">GetTeklaReport&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;Generic version of </span><a href="idh-topic150.htm#TB1_GTR" class="hs7">GetTeklaReport</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GTUDA" class="hs7">GetTeklaUDA</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Returns</span><span class="ts79">&nbsp;user defined attributes text from model objects.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GTUDAT" class="hs7">GetTeklaUDA&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;Generic version of </span><a href="idh-topic150.htm#TB1_GTUDA" class="hs7">GetTeklaUDA</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetVector" class="hs7">GetVector</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Returns the direction vector of the beam.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_XYZList" class="hs7">GetXYZList</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Gets (x,y,z) list from collection of points or contour points or DXF points.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_MDHighlighter" class="hs7">Highlight</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Highlight</span><span class="ts82">s</span><span class="ts82">&nbsp;</span><span class="ts82">the collection of </span><span class="ts82">existing model</span><span class="ts82">&nbsp;(or drawing)</span><span class="ts82">&nbsp;object</span><span class="ts82">s</span><span class="ts82">&nbsp;</span><span class="ts82">visually in model (or drawing).</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="11" height="11" border="0" src="images/ifctype.png" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_IfcVal" class="hs7">IfcValue</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;</span><span class="ts82">Gets text</span><span class="ts82">&nbsp;</span><span class="ts82">value of IFC property</span><span class="ts82">&nbsp;(or quantity)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetUI" class="hs7">InputBox</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;Shows a pop-up window to receive input data from the user. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_GetUIT" class="hs7">InputBox&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;Generic version of </span><a href="idh-topic150.htm#TB1_GetUI" class="hs7">InputBox</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_IsLike" class="hs7">IsLike</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Performs pattern matching with wildcards</span><span class="ts82">&nbsp;(</span><span class="ts88">e.g.</span><span class="ts82">&nbsp;* and ?</span><span class="ts82">&nbsp;)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_IsTapered" class="hs7">IsTapered</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Tells whether the reinforcement group is tapered or not.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_IsValidModelObj" class="hs7">IsValidModelObjectOfType&lt;T&gt;</a><span class="ts82">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function controls the validity of a drawing object (in</span><span class="ts89">&nbsp;TSD&nbsp;</span><span class="ts79">namespase) as a model object (of type &quot;T&quot;).</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_LGroup" class="hs7">LengthInGroup</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns total length of rebar group (also works for tapered groups).</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Lookup" class="hs7">Lookup</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Performs match lookup in a column (by </span><span class="ts82">name or </span><span class="ts82">index), and returns the corresponding text from another column (by </span><span class="ts82">name or </span><span class="ts82">index).</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_LookupT" class="hs7">Lookup&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;Generic version of </span><a href="idh-topic150.htm#TB1_Lookup" class="hs7">Lookup</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_NSOfType" class="hs7">OfType&lt;T&gt;</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts82">Returns list of all&nbsp;model</span><span class="ts82">/drawing</span><span class="ts82">&nbsp;objects with specified type</span><span class="ts82">&nbsp;&quot;T&quot;</span><span class="ts82">&nbsp;(Regardless of selected objects)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_PartList" class="hs7">PartList</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function returns the part list for the given assembly.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Pick1Face" class="hs7">PickFace</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function asks the user to pick one face (outline plane) and returns its point list.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Pick1Obj" class="hs7">PickObjectOfType&lt;T&gt;</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function asks the user to pick one model or drawing object </span><span class="ts82">(of type &quot;T&quot;)</span><span class="ts79">.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_PickObj" class="hs7">PickObjectsOfType&lt;T&gt;</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function asks the user to pick model objects </span><span class="ts82">(of type &quot;T&quot;)</span><span class="ts79">. The sequence is terminated by the </span><span class="ts81">middle</span><span class="ts79">&nbsp;button pick.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Pick1Point" class="hs7">PickPoint</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function asks the user to pick a point in model or drawing.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_PickPoints" class="hs7">PickPoints</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function asks the user to pick points in model or in drawing and returns the point list.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_DelimitedReader" class="hs7">ReadDelimitedData</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">It's a tiny (but strong enough) text parser that can be used for parsing valid delimited text files (*.txt, *.csv, *.dat, ...) to DataTable.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ReadAutoCAD" class="hs7">ReadFromAutoCAD</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts79">Converts the AutoCAD text entities (that are generated with &quot;LIST&quot; command in AutoCAD) to Tekla objects. Only works on English language pack of AutoCAD and for non-curved entities.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /><img width="12" height="11" border="0" src="images/dxftype.png" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ReadDxfEntities" class="hs7">ReadFromDXF</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Converts </span><span class="ts82">the DXF </span><span class="ts82">entity (or </span><span class="ts82">entities</span><span class="ts82">)</span><span class="ts82">&nbsp;to Tekla objects</span><span class="ts82">.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell4">
        <p class="ps50"><a href="idh-topic150.htm#TB1_RebList" class="hs7">RebarList</a></p>
      </td>
      <td class="cell4">
        <p class="ps50"><span class="ts86">(New)</span><span class="ts82">&nbsp;</span><span class="ts82">Gets rebar list for the part</span><span class="ts82">,&nbsp;cast-unit and rebar assembly</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_RDups" class="hs7">RemoveDuplicates</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Removes duplicate</span><span class="ts82">s </span><span class="ts82">from a collection.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_PRound" class="hs7">Round</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Rounds</span><span class="ts82">&nbsp;</span><span class="ts82">coordinates</span><span class="ts82">&nbsp;(or fractional values)</span><span class="ts82">&nbsp;to a specified number of fractional digits.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_WP2Global" class="hs7">SetToGlobalWorkPlane</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function resets the work plane to global. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_WP2Local" class="hs7">SetToLocalWorkPlaneOf</a><span class="ts80">&nbsp;</span></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function changes the work plane to the given part's local coordinate system. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_WP" class="hs7">SetToWorkPlane</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts79">This function changes the work plane to the given transformation plane.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_WGroup" class="hs7">WeightInGroup</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Returns total weight of rebar group (also works for tapered groups).</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_Write" class="hs7">WriteOnModel</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Writes the given text</span><span class="ts82">&nbsp;(or </span><span class="ts82">string builder</span><span class="ts82">)</span><span class="ts82">&nbsp;on model.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell3">
        <p class="ps49"><img width="16" height="11" border="0" src="images/pubmethod.gif" /><img width="13" height="10" border="0" src="images/static.gif" /></p>
      </td>
      <td class="cell3">
        <p class="ps50"><a href="idh-topic150.htm#TB1_ZFit" class="hs7">ZoomToFit</a></p>
      </td>
      <td class="cell3">
        <p class="ps50"><span class="ts82">Zooms </span><span class="ts82">in on</span><span class="ts82">&nbsp;</span><span class="ts82">current selected objects or on </span><span class="ts82">the given par</span><span class="ts82">t/</span><span class="ts82">assembly list (only works in model area).</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps19"><span class="ts17">&nbsp;</span></p>
<p class="ps19"><span class="ts17">&nbsp;</span></p>
<div class="block2">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_MAINDB"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;Database&quot;</span></p>
<p class="ps43"><span class="ts91">Description: </span><span class="ts79">This is a predefined variable which is responsible for storing the current user selection. After selecting of any area in model, the related data will be stored in this variable automatically and can be used in your query body.</span></p>
<p class="ps43"><span class="ts92">Note: </span><span class="ts79">This variables does not preserve the selection order.</span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;p = n </span><span class="ts95">as</span><span class="ts96">&nbsp;Part</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;p != </span><span class="ts95">null</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = p.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;color = p.Class</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, color };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps53"><span class="ts97">Sample-2 (Query)</span><span class="ts98">Recommended</span><span class="ts97">:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;color = n.Class</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, color };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (Command):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(item.Class == </span><span class="ts99">&quot;2&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Name = item.Name + </span><span class="ts99">&quot;(PG2)&quot;</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_NDDB"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;DrawingDatabase&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This is a predefined variable which is responsible for storing the current user selection in a drawing. After selecting of any area in drawing, the related data will be stored in this variable automatically and can be used in your query body. </span></p>
<p class="ps43"><span class="ts79">(Discussed more</span><span class="ts82">&nbsp;in </span><a href="idh-topic50.htm#FSD1" class="hs7">Sample12</a><span class="ts82">&nbsp;~ </span><a href="idh-topic50.htm#FSD4" class="hs7">Sample15</a><span class="ts79">)</span></p>
<p class="ps43"><span class="ts92">Note: </span><span class="ts79">This variables does not preserve the selection order.</span></p>
<p class="ps43"><span class="ts92">Note: </span><span class="ts79">Drawing objects are </span><span class="ts80">not </span><span class="ts79">the same as model objects. Drawings are just presentations of the model objects. Drawing object types are stored in </span><span class="ts80">TSD </span><span class="ts79">(</span><span class="ts80">T</span><span class="ts79">ekla.</span><span class="ts80">S</span><span class="ts79">tructures.</span><span class="ts80">D</span><span class="ts79">rawing) namespace alias in order to avoid conflicting with model object names. Here is a quick comparison:</span></p>
<p class="ps5"><span class="ts33">&nbsp;</span></p>
<p class="ps22"><img width="328" height="225" border="0" src="images/image(18).png" /></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps22"><img width="555" height="188" border="0" src="images/image(30).png" /></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Line&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Start = n.StartPoint</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;End = n.EndPoint</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Start, End };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.GetModelObjectsOfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (Command):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Text&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(item.TextString.Contains(</span><span class="ts99">&quot;number&quot;</span><span class="ts96">))</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Delete();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_EDRAWING"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;EntireDrawing&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This is a predefined variable which returns </span><span class="ts81">all</span><span class="ts79">&nbsp;drawing objects in current drawing (regardless of selected objects in drawing). It a</span><span class="ts82">lso includes hidden parts. </span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;EntireDrawing.GetModelObjectsOfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts92">Note: </span><span class="ts79">If you want to get all drawing objects with </span><span class="ts81">specific</span><span class="ts79">&nbsp;type. It's </span><span class="ts80">highly recommended</span><span class="ts79">&nbsp;to use OfType&lt;T&gt; method </span><span class="ts81">without</span><span class="ts79">&nbsp;</span><span class="ts82">specifying the source</span><span class="ts79">. (Learn more </span><a href="idh-topic150.htm#TB1_NSOfType" class="hs7">here</a><span class="ts79">)</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_EMODEL"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;EntireModel&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This is a predefined variable which returns </span><span class="ts81">all</span><span class="ts79">&nbsp;model objects in current model (regardless of selected objects in model). It a</span><span class="ts82">lso includes hidden or filtered parts. </span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;EntireModel.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts92">Note: </span><span class="ts79">If you want to get all model objects with </span><span class="ts81">specific</span><span class="ts79">&nbsp;type. It's </span><span class="ts80">highly recommended&nbsp;to </span><span class="ts79">use OfType&lt;T&gt; method </span><span class="ts81">without</span><span class="ts79">&nbsp;</span><span class="ts82">specifying the source</span><span class="ts79">. (Learn more </span><a href="idh-topic150.htm#TB1_NSOfType" class="hs7">here</a><span class="ts79">)</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_AllEntities"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;AllEntities&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts101">&nbsp;</span><span class="ts102">Returns </span><span class="ts102">all DXF document entities from one or all layers.</span><span class="ts103">&nbsp;</span><span class="ts104">(Powered by </span><a href="https://github.com/haplokuon/netDxf" target="_blank" class="hs9">netDxf</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">netDxf.</span><span class="ts80">DxfDocument</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.AllEntities( </span><span class="ts107">FromLayer</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">FromLayer</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Name of layer</span><span class="ts79">&nbsp;(Case sensitive)</span><span class="ts79">. Leave it empty to get </span><span class="ts81">all</span><span class="ts79">&nbsp;</span><span class="ts79">entities from </span><span class="ts81">all</span><span class="ts79">&nbsp;layers. Default: Empty</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1: Getting all entities</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span></p>
        <p class="ps42"><span class="ts110">&nbsp;</span></p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2: Getting all entities in Layer1 (Property filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span></p>
        <p>&nbsp;</p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities(FromLayer: </span><span class="ts109">&quot;Layer1&quot;</span><span class="ts96">);</span></p>
        <p class="ps42"><span class="ts110">&nbsp;</span></p>
        <p class="ps42"><span class="ts111">//or:</span></p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = </span><span class="ts95">from</span><span class="ts96">&nbsp;n in MyDxfFile.AllEntities() </span><span class="ts95">where </span><span class="ts96">n.Layer.Name == </span><span class="ts99">&quot;Layer1&quot;</span><span class="ts96">&nbsp;</span><span class="ts95">select </span><span class="ts96">n;</span></p>
        <p class="ps42"><span class="ts112">&nbsp;</span></p>
        <p class="ps42"><span class="ts111">//or:</span></p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities().Where(x =&gt; x.Layer.Name == </span><span class="ts99">&quot;Layer1&quot;</span><span class="ts96">);</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3: Getting all circles in DXF document (Type filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span></p>
        <p>&nbsp;</p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities().OfType&lt;</span><span class="ts96">netDxf.Entities.Circle</span><span class="ts96">&gt;();</span></p>
        <p class="ps42"><span class="ts110">&nbsp;</span></p>
        <p class="ps42"><span class="ts111">//or:</span></p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.Circles; </span><span class="ts111">//recommended</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-4: Getting all red circles in DXF document (Type and property filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span></p>
        <p>&nbsp;</p>
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;entities = </span><span class="ts95">from</span><span class="ts96">&nbsp;n in MyDxfFile.Circles </span><span class="ts95">where </span><span class="ts113">n.</span><span class="ts96">Color.</span><span class="ts76">Equals(AciColor.Red)</span><span class="ts96">&nbsp;</span><span class="ts95">select </span><span class="ts96">n</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps57"><span class="ts114">&nbsp;</span></p>
<p class="ps57"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can also convert these entities to Tekla objects. Read more </span><a href="idh-topic150.htm#TB1_ReadDxfEntities" class="hs10">here</a><span class="ts79">.</span></p>
<p class="ps58"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_AngleBeam"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">AngleWithBeam</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns the minimum angle (in degree) with other beam. The result would be between 0 and 90 degree. </span></p>
<p class="ps22"><img width="158" height="187" border="0" src="images/image(10).png" /></p>
<p class="ps20"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Beam</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.AngleWithBeam( </span><span class="ts107">OtherBeam</span><span class="ts96">, </span><span class="ts107">Precision</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">OtherBeam</span><span class="ts79">.</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of the result. Default= 2, Min= 0, Max=9</span></p>
<p class="ps59"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Let the user to pick two beams: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;beam1 = MyModel.PickObjectOfType&lt;Beam&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;beam2 = MyModel.PickObjectOfType&lt;Beam&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;angle = beam1.AngleWithBeam(beam2);</span><br /><span class="ts111">//Showing the result in the status bar:</span><br /><span class="ts96">Operation.DisplayPrompt(</span><span class="ts99">&quot;Angle is: &quot;</span><span class="ts96">&nbsp;+ angle + </span><span class="ts99">&quot;degree&quot;</span><span class="ts96">);</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_AngleVector"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">AngleWith</span><span class="ts90">Vector&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns the minimum angle (in degree) with the given vector. The result would be between 0 &amp; 90 degree. </span></p>
<p class="ps61"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Beam / ContourPlate</span></p>
<p class="ps62"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts79">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.AngleWithVector( </span><span class="ts107">GivenVector</span><span class="ts96">, </span><span class="ts107">Precision</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps46"><span class="ts108">GivenVector</span><span class="ts80">:</span><span class="ts79">&nbsp;The given vector.</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional):</span><span class="ts79">&nbsp;Precision of the result. Default= 2, Min= 0, Max=9</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps62"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting angle with the given vector (with default precision):</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">AngleWithVector(MyVector)</span></p>
<p class="ps64"><span class="ts118">&nbsp;</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting angle with the given vector (with defined precision):</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">AngleWithVector(MyVector</span><span class="ts117">, 4</span><span class="ts117">)</span></p>
<p class="ps65"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Vector MyVector = </span><span class="ts95">new</span><span class="ts96">&nbsp;Vector(0, 1, 1);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;ContourPlate&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;angle = n.AngleWithVector(MyVector)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;guid = n.Identifier.GUID</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, angle, guid };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps66"><span class="ts92">Note:</span><span class="ts79">&nbsp;Clicking on the </span><span class="ts89">GUID </span><span class="ts79">column will result to highlight the object in your model area (Find more </span><a href="idh-topic50.htm#TB1_SAM_HIGHIGHT" class="hs8">here</a><span class="ts79">).</span></p>
<p class="ps67"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_AngleZ"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">AngleWithZ</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns the minimum angle (in degree) with current work plane's Z-Axis. The result would be between 0 &amp; 90 degree. </span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps22"><img width="374" height="220" border="0" src="images/image(8).png" /></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Beam / ContourPlate</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.AngleWithZ( </span><span class="ts107">Precision</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional):</span><span class="ts79">&nbsp;Precision of the result. Default= 2, Min= 0, Max=9</span></p>
<p class="ps59"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;b1 = MyModel.PickObjectOfType&lt;Beam&gt;();</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;angle = b1.AngleWithZ();</span><br /><span class="ts111">//Showing the result in the status bar:</span><br /><span class="ts96">Operation.DisplayPrompt(</span><span class="ts99">&quot;Angle with Z is: &quot;</span><span class="ts96">&nbsp;+ angle + </span><span class="ts99">&quot;degree&quot;</span><span class="ts96">);</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Highlighting horizontal beams:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;Query = (</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;tolerance = 5</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;90 - n.AngleWithZ() &lt; tolerance</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n).Highlight();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;angle = n.AngleWithZ()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;guid = n.Identifier.GUID</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, angle, guid };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;Clicking on the </span><span class="ts89">GUID </span><span class="ts79">column will result to highlight the object in your model area (Find more </span><a href="idh-topic50.htm#TB1_SAM_HIGHIGHT" class="hs8">here</a><span class="ts79">).</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_ADate"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;AsDate&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;</span><span class="ts82">Safe convert to DateTime objects. Returns default value when conversion fails.</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;AsDouble(</span><span class="ts107">&nbsp;obj, IfFails, CustomFormat, provider </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">obj</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Input object</span><span class="ts82">. It can be string (text) or</span><span class="ts82">&nbsp;UTC Unix Timestamp</span></p>
<p class="ps55"><span class="ts108">IfFails </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Value to return if conversion fails. Default= 01/01/0001 00:00:00</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">1667808000</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7)</span><span class="ts117">&nbsp;</span><span class="ts123">Equivalent Unix Time-stamp</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts124">1667808000</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7)</span><span class="ts117">&nbsp;</span><span class="ts123">Equivalent Unix Time-stamp</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">11/7/2022</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7)</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">11-7-2022</span><span class="ts120">&quot;</span><span class="ts124">, CustomFormat:</span><span class="ts120">&nbsp;&quot;M-d-yyyy&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7)</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">11-7-2022</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 01/01/0001 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">ABCD</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 01/01/0001 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts120">&quot;&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 01/01/0001 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDate</span><span class="ts117">(</span><span class="ts121">null</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 01/01/0001 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps68">&nbsp;</p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;phase = n.GetTeklaReport(</span><span class="ts99">&quot;phase&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;PSEDate = AsDate(n.GetTeklaUDA(</span><span class="ts99">&quot;planned start e&quot;</span><span class="ts96">)).ToShortDateString()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, phase, PSEDate };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Finding (Highlighting) all assemblies whose installation date is today:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = (</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;OfType&lt;Assembly&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;PSE = AsDate(n.GetTeklaUDA(</span><span class="ts99">&quot;planned start e&quot;</span><span class="ts96">))</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;PSE.Date == DateTime.Now.Date</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n).Highlight();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_ADouble"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;AsDouble&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Safe c</span><span class="ts82">onvert to </span><span class="ts82">double-precision floating-point number. </span><span class="ts82">Returns 0 </span><span class="ts82">(by default) </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;AsDouble( </span><span class="ts107">obj, Precision, IfFails, styles, provider </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">obj</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Input object</span><span class="ts82">. It can be string (text), numeric or DateTime object.</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">IfFails </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Value to return if conversion fails. Default= 0</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12.3</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12.3</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12.32112</span><span class="ts120">&quot;</span><span class="ts124">, 3</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12.321 (Precision: 3)</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7))</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts124">1667808000</span><span class="ts52">&nbsp;</span><span class="ts123">UTC Unix Time-stamp</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">ABCD</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts120">&quot;&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts121">null</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsDouble</span><span class="ts117">(</span><span class="ts121">null</span><span class="ts124">, IfFails: -1</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns -1 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps69"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get UDA as numeric value (Precision: 3):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;shorten = AsDouble(n.GetTeklaUDA(</span><span class="ts99">&quot;xs shorten&quot;</span><span class="ts96">), 3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;shorten &gt; 0</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UDA1 = n.GetTeklaUDA(</span><span class="ts99">&quot;user field 1&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ shorten, UDA1 };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps66"><span class="ts125">Hint:</span><span class="ts56">&nbsp;You can use </span><span class="ts126">n.GetTeklaUDA&lt;</span><span class="ts127">double</span><span class="ts126">&gt;(</span><span class="ts128">&quot;xs shorten&quot;</span><span class="ts126">, 3)</span><span class="ts55">&nbsp;instead </span><span class="ts126">AsDouble(n.GetTeklaUDA(</span><span class="ts128">&quot;xs shorten&quot;</span><span class="ts126">), 3)</span><span class="ts55">&nbsp;in the sample above.</span></p>
<p class="ps67"><span class="ts33">&nbsp;</span></p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps56"><a name="TB1_AImage"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;AsImage&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Safe c</span><span class="ts82">onvert to </span><span class="ts82">image byte array. returns default image (</span><img width="27" height="19" border="0" src="images/image(23).png" /><span class="ts82">) </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;AsInteger( </span><span class="ts107">obj , format </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">obj</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Input object</span><span class="ts82">. It can be string (path to image file), or SD.Image object.</span></p>
<p class="ps55"><span class="ts108">format</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">I</span><span class="ts82">mage format. Default: SD.Imaging.ImageFormat.Png</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps64"><span class="ts117">AsImage</span><span class="ts117">(</span><span class="ts120">@&quot;C:\pic1.png</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns image as byte array (byte[]) to show on TeklaPad data table.</span></p>
<p class="ps68">&nbsp;</p>
<p class="ps69"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pic = AsImage(</span><span class="ts99">@&quot;C:\pic1.png</span><span class="ts99">&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, pic };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps56"><a name="TB1_Aint"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;AsInteger&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Safe c</span><span class="ts82">onvert to </span><span class="ts82">integer number. </span><span class="ts82">Returns 0 </span><span class="ts82">(by default) </span><span class="ts82">when conversion fail</span><span class="ts82">s.</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;AsInteger( </span><span class="ts107">obj, IfFails, styles, provider </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">obj</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Input object</span><span class="ts82">. It can be string (text), numeric or DateTime object.</span></p>
<p class="ps55"><span class="ts108">IfFails </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Value to return if conversion fails. Default= 0</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12.3</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts124">12.3</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 12</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">12.7</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 13</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts124">12.7</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 13</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts121">new </span><span class="ts122">DateTime</span><span class="ts117">(2022,11,7))</span><span class="ts117">&nbsp;--&gt; Returns </span><span class="ts124">1667808000</span><span class="ts52">&nbsp;</span><span class="ts123">UTC Unix Time-stamp</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">ABCD</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts120">&quot;&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts121">null</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns 0 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps64"><span class="ts117">AsInteger</span><span class="ts117">(</span><span class="ts121">null</span><span class="ts124">, IfFails: -1</span><span class="ts117">)</span><span class="ts117">&nbsp;--&gt; Returns -1 (According to &quot;</span><span class="ts108">IfFails&quot; </span><span class="ts117">Parameter )</span></p>
<p class="ps69"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;color = AsInteger(n.Class)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;color &gt; 3</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, color };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Assigning &quot;Planned Start Date&quot; to selected parts:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;year = 2021;</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;month = 8;</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;day = 16;</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;dt = </span><span class="ts95">new</span><span class="ts96">&nbsp;DateTime(year, month, day);</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.SetUserProperty(</span><span class="ts99">&quot;PLANNED_START_E&quot;</span><span class="ts96">, AsInteger(dt));</span><br /><span class="ts96">}</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps66"><span class="ts92">Note:</span><span class="ts79">&nbsp;Keep in mind that </span><span class="ts82">the input of </span><a href="https://developer.tekla.com/tekla-structures/api/14/14453" target="_blank" class="hs7">SetUserProperty</a><span class="ts79">&nbsp;method</span><span class="ts82">&nbsp;i</span><span class="ts79">s </span><span class="ts80">not</span><span class="ts79">&nbsp;flexible and is always case sensitive (b</span><span class="ts82">ecause it belongs to the original Tekla API&nbsp; not xAPI </span><span class="ts79">). </span></p>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Move parts to different phases based on their color:</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; Phase ph = </span><span class="ts95">new</span><span class="ts96">&nbsp;Phase(</span><span class="ts96">Math.Abs(AsInteger(item.Class))</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Inserting the new phase into model (if not already exists):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; ph.Insert();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.SetPhase(ph);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_FindParts"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">FindPartsAround</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns list of parts around the current part.</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps22"><img width="288" height="187" border="0" src="images/image(11).png" /></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Part</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.FindPartsAround( </span><span class="ts107">Offset</span><span class="ts96">, </span><span class="ts107">IncludingItself</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Offset</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Offset distance for searching. Default= 0.1</span></p>
<p class="ps55"><span class="ts108">IncludingItself</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Defines whether the result contains current part or not. Default= false</span></p>
<p class="ps61"><span class="ts19">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (Command):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;parts = PickedPart.FindPartsAround(50); </span><span class="ts111">//Searching offset:50</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;parts)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Class = PickedPart.Class;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Material = PickedPart.Material;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;parts = PickedPart.FindPartsAround(100); </span><span class="ts111">//Searching offset:100</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;parts</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.Profile.ProfileString, n.Identifier.GUID };</span><br /><br /><span class="ts95">return</span><span class="ts96">&nbsp;query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GetArray"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetArray&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Converts&nbsp; an enumerable (or an enumerator) to array.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">IEnumerable / IEnumerator</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetArray()</span></p>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="ts95">let</span><span class="ts96">&nbsp;pos = r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="ts95">let</span><span class="ts96">&nbsp;pic = r.GetTeklaPullOut()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ pos, pic };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts33">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_Get1ContourPoint"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Get</span><span class="ts90">Contour</span><span class="ts90">Point</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Converts a point to contour point. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Point</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetContourPoint( </span><span class="ts107">ChamferType</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps46"><span class="ts108">ChamferType</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Chamfer type. Default: null (no chamfer)</span></p>
<p class="ps22">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_ContourPointList"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Get</span><span class="ts90">Contour</span><span class="ts90">PointList</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Gets collection of contour points. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;Point&gt;</span><span class="ts79">&nbsp;/ Beam / PolyBeam / ContourPlate / Reinforcement</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetContourPointList( </span><span class="ts107">Index, WithHooks </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters (only for &quot;reinforcement&quot; target):</span></p>
<p class="ps46"><span class="ts108">Index</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Index of rebar in group. Default= 0 </span></p>
<p class="ps46"><span class="ts108">WithHooks</span><span class="ts80">&nbsp;(Optional):</span><span class="ts87">&nbsp;</span><span class="ts82">Determines whether the hook points should be included in the rebar geometry or not. Default: true</span></p>
<p class="ps59"><span class="ts129">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart&nbsp;= m1.PickObjectOfType&lt;Part&gt;();</span><br /><br /><span class="ts111">//Getting node list for selected part:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;nodes = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;PickedPart.GetContourPointList().Round(2)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.X, n.Y, n.Z , n.Chamfer.Type};</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;nodes;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedBeams = m1.PickObjectsOfType&lt;Part&gt;();</span><br /><br /><span class="ts96">PolyBeam pb = </span><span class="ts95">new</span><span class="ts96">&nbsp;PolyBeam();</span><br /><span class="ts111">//Defining some properties according to first picked part:</span><br /><span class="ts96">pb.Profile.ProfileString = PickedBeams[0].Profile.ProfileString;</span><br /><span class="ts96">pb.Class = PickedBeams[0].Class;</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;PickedBeams)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;points = item.GetContourPointList();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">foreach</span><span class="ts96">&nbsp;(var node </span><span class="ts95">in</span><span class="ts96">&nbsp;points)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb.AddContourPoint(node);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Delete();</span><br /><span class="ts96">}</span><br /><span class="ts96">pb.Contour.ContourPoints = pb.Contour.ContourPoints.RemoveDuplicates();</span><br /><span class="ts96">pb.Insert();</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-3 (For reinforcements):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var rebar </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Reinforcement&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Drawing a PolyBeam on each rebar in selected rebar groups: </span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">for</span><span class="ts96">&nbsp;(</span><span class="ts95">int</span><span class="ts96">&nbsp;i = 0; i &lt; rebar.GetNumberOfRebars(); i++)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PolyBeam pb = </span><span class="ts95">new</span><span class="ts96">&nbsp;PolyBeam();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb.Profile.ProfileString = </span><span class="ts99">&quot;D20&quot;</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">foreach</span><span class="ts96">&nbsp;(var node </span><span class="ts95">in</span><span class="ts96">&nbsp;rebar.GetContourPointList(i, </span><span class="ts95">false</span><span class="ts96">))</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb.AddContourPoint(node);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb.Insert();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts33">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_FindDxfDesc"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetDescription&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Returns</span><span class="ts131">&nbsp;description of </span><span class="ts131">DXF item's </span><span class="ts131">layer based o</span><span class="ts131">n DXF document. </span><span class="ts104">(Powered by </span><a href="https://github.com/haplokuon/netDxf" target="_blank" class="hs9">netDxf</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts79">&nbsp;</span><span class="ts79">netDxf.</span><span class="ts79">Tables.</span><span class="ts80">Layer</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetDescription( </span><span class="ts107">DxfDoc</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">DxfDoc</span><span class="ts80">: </span><span class="ts79">Loaded DXF document (with </span><span class="ts132">DxfDocument.Load(...)</span><span class="ts79">&nbsp;)</span></p>
<p class="ps61"><span class="ts19">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<p class="ps70"><span class="ts92">Important:</span><span class="ts82">&nbsp;In this example, it's assumed that dxf entities with different profiles are in separate layers, and the name of each profile is in the &quot;</span><span class="ts87">Description</span><span class="ts82">&quot; of that layer:</span></p>
<p class="ps71"><img width="657" height="184" border="0" src="images/dxfldesc.png" /></p>
<p class="ps72"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample (Command): Assign profiles according to layer descriptions</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF document:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;doc = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;doc.AllEntities())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting layer desc.</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;desc = item.Layer.GetDescription(doc).Trim();</span><br /><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Reading visible DXF entities separately (AutoInsert must be &quot;false&quot;) and converting:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;TeklaObjects = item.ReadFromDXF(ScaleFactor: 1000, BeamProfile: desc, PlateProfile: desc, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">false</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Make changes to converted objects</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">foreach</span><span class="ts96">&nbsp;(var obj </span><span class="ts95">in</span><span class="ts96">&nbsp;TeklaObjects)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(obj != </span><span class="ts95">null</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Inserting manually:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.Insert();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block4">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_GetField"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetField&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This method looks into a DataRow and gets the row data stored in the column specified by index (that starts from zero) or column name.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">DataRow</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetField( </span><span class="ts107">ColumnName / ColumnIndex</span><span class="ts96">, </span><span class="ts107">IfNotFound</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">ColumnName / ColumnIndex</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Value to return if no match found. Default: Empty text</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">foreach</span><span class="ts96">&nbsp;(DataRow item </span><span class="ts95">in</span><span class="ts96">&nbsp;data.Rows)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting row data by column index (starts from zero):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param1 = item.GetField(0);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param2 = item.GetField(1);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting row data by column name:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param3 = item.GetField(</span><span class="ts99">&quot;Name&quot;</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param4 = </span><span class="ts95">double</span><span class="ts96">.Parse(item.GetField(</span><span class="ts99">&quot;X_Start&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//...</span><br /><span class="ts96">}</span><br /><span class="ts111">//rest of the command...</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_GetFieldT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetField&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_GetField" class="hs7">GetField</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime).&nbsp; In fact, This method uses </span><span class="ts82">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) internally.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">DataRow</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetField&lt;T&gt;( </span><span class="ts107">ColumnName / ColumnIndex</span><span class="ts96">, </span><span class="ts107">IfNotFound, Precision, styles, CustomFormat, provider </span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">ColumnName / ColumnIndex</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Value to return if no match found. Default: Empty text</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps73">&nbsp;</p>
<p class="ps0"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">foreach</span><span class="ts96">&nbsp;(DataRow item </span><span class="ts95">in</span><span class="ts96">&nbsp;data.Rows)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting row data by column index (starts from zero) as integer:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param1 = item.GetField&lt;</span><span class="ts95">int</span><span class="ts96">&gt;(0);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting row data by column name as double:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;param4 = item.GetField&lt;</span><span class="ts95">double</span><span class="ts96">&gt;(</span><span class="ts99">&quot;X_Start&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//...</span><br /><span class="ts96">}</span><br /><span class="ts111">//rest of the command...</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GIfcData"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcData&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Gets text value of IFC object's property or quantity. </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcData( </span><span class="ts107">Name</span><span class="ts96">, </span><span class="ts107">SetName,</span><span class="ts96">&nbsp;</span><span class="ts107">IfNotFound, PropFirst</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Name </span><span class="ts80">: </span><span class="ts82">Name of property or quantity (Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">SetName </span><span class="ts80">(Optional): </span><span class="ts82">Name of property </span><span class="ts82">set </span><span class="ts82">or quantity </span><span class="ts82">set </span><span class="ts82">(Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found. Default: Empty text</span></p>
<p class="ps55"><span class="ts108">PropFirst </span><span class="ts80">(Optional):</span><span class="ts87">&nbsp;</span><span class="ts82">Gives priority to properties (if property and quantity of the same name are found). Default: true</span></p>
<p class="ps0">&nbsp;</p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets text value of &quot;P1&quot; property/quantity in &quot;Pset1&quot; set:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;SetName: </span><span class="ts120">&quot;</span><span class="ts120">Pset1</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;SetName: </span><span class="ts120">&quot;</span><span class="ts120">Pset1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;IfNotFound: </span><span class="ts120">&quot;</span><span class="ts120">N/A</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets text value of &quot;P1&quot; property/quantity:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;IfNotFound: </span><span class="ts120">&quot;</span><span class="ts120">N/A</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps76">&nbsp;</p>
<p class="ps77"><span class="ts93">Usage sample:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading IFC:</span><br /><span class="ts96">DatabaseIfc db = </span><span class="ts95">new</span><span class="ts96">&nbsp;DatabaseIfc(</span><span class="ts109">@&quot;C:\Sample.ifc&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;db.Project.Extract&lt;IfcElement&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined property or quantity</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;param1 = n.GetIfcData(</span><span class="ts99">&quot;UDA Name1&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;param2 = n.GetIfcData(</span><span class="ts99">&quot;UDA Name2&quot;</span><span class="ts96">, IfNotFound: </span><span class="ts99">&quot;N/A&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined property or quantity in property set or quantity set (element quantity)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;param3 = n.GetIfcData(</span><span class="ts99">&quot;UDA Name3&quot;</span><span class="ts96">&nbsp;, </span><span class="ts99">&quot;SetName&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ param1, param2, param3 };</span><br /><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GIfcDataT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcData&lt;T&gt;&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Generic version of </span><a href="idh-topic150.htm#TB1_GIfcData" class="hs9">GetIfcData</a><span class="ts131">&nbsp;method that converts the result to type &quot;T&quot; (string/int/double/DateTime). </span><span class="ts135">&nbsp;In fact, This method uses </span><span class="ts131">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs9">AsDouble</a><span class="ts131">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs9">AsInteger</a><span class="ts131">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs9">AsDate</a><span class="ts131">&nbsp;) internally. </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcData&lt;T&gt;( </span><span class="ts107">Name</span><span class="ts96">, </span><span class="ts107">SetName,</span><span class="ts96">&nbsp;</span><span class="ts107">IfNotFound, PropFirst, Precision, styles, CustomFormat, provider</span><span class="ts96">&nbsp;)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Name </span><span class="ts80">: </span><span class="ts82">Name of property or quantity (Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">SetName </span><span class="ts80">(Optional): </span><span class="ts82">Name of property </span><span class="ts82">set </span><span class="ts82">or quantity </span><span class="ts82">set </span><span class="ts82">(Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found. Default: Empty text</span></p>
<p class="ps55"><span class="ts108">PropFirst </span><span class="ts80">(Optional):</span><span class="ts87">&nbsp;</span><span class="ts82">Gives priority to properties (if property and quantity of the same name are found). Default: true</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<p class="ps62"><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets numeric value (as </span><span class="ts136">integer</span><span class="ts116">) of &quot;P1&quot; property/quantity in &quot;Pset1&quot; set:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData&lt;</span><span class="ts121">int</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;SetName: </span><span class="ts120">&quot;</span><span class="ts120">Pset1</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData&lt;</span><span class="ts121">int</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;SetName: </span><span class="ts120">&quot;</span><span class="ts120">Pset1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;IfNotFound: </span><span class="ts120">&quot;</span><span class="ts120">N/A</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets numeric value (as </span><span class="ts136">double</span><span class="ts116">) of &quot;P1&quot; property/quantity:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData&lt;</span><span class="ts121">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.GetIfcData&lt;</span><span class="ts121">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts117">Name: </span><span class="ts120">&quot;</span><span class="ts120">P1</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;IfNotFound: </span><span class="ts120">&quot;</span><span class="ts120">N/A</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GIfcMat"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcMateialData&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Gets complete material data associated with the IFC object.&nbsp; </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcMaterialData( </span><span class="ts107">GetIfcType, GetName, GetCategory, GetDesc, DetailedInfo, IfNotFound</span><span class="ts96">&nbsp;)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">GetIfcType </span><span class="ts80">(Optional):</span><span class="ts87">&nbsp;</span><span class="ts82">Extracts material type. Default: false</span></p>
<p class="ps55"><span class="ts108">GetName </span><span class="ts80">(Optional): </span><span class="ts82">Extracts material name. Default: true</span></p>
<p class="ps55"><span class="ts108">GetCategory</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Extracts material category. Default: false</span></p>
<p class="ps55"><span class="ts108">GetDesc </span><span class="ts80">(Optional):</span><span class="ts87">&nbsp;</span><span class="ts82">Extracts material description. Default: false</span></p>
<p class="ps55"><span class="ts108">DetailedInfo</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Extracts detailed info (if any) in parentheses. For example the thickness of the layers</span><span class="ts82">&nbsp;or...</span><span class="ts82">&nbsp;Default: true</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found. Default: Empty text</span></p>
<p class="ps73">&nbsp;</p>
<p class="ps62"><span class="ts93">Usage sample:</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading IFC:</span><br /><span class="ts96">DatabaseIfc db = </span><span class="ts95">new</span><span class="ts96">&nbsp;DatabaseIfc(</span><span class="ts109">@&quot;C:\Sample.ifc&quot;</span><span class="ts96">);</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;db.Project.Extract&lt;IfcElement&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;data = n.GetIfcData(</span><span class="ts99">&quot;UDA Name&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get material info:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;material = n.GetIfcMaterialData()</span><br /><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ material, data };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts137">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcProp"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcProperty&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts101">&nbsp;</span><span class="ts131">Gets IFC object's property (as GeometryGymIfc.Ifc.</span><span class="ts138">IfcP</span><span class="ts138">roperty</span><span class="ts131">) with name of property. </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcProperty( </span><span class="ts107">PropertyName, PropertySet&nbsp;</span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">PropertyName </span><span class="ts80">:</span><span class="ts87">&nbsp;</span><span class="ts82">Name of property (Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">PropertySet </span><span class="ts80">(Optional): </span><span class="ts82">Name of property set (Case-Sensitive)</span></p>
<p class="ps73">&nbsp;</p>
<p class="ps0"><span class="ts93">Usage samples:</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading IFC:</span><br /><span class="ts96">DatabaseIfc db = </span><span class="ts95">new</span><span class="ts96">&nbsp;DatabaseIfc(</span><span class="ts109">@&quot;C:\Sample.ifc&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;db.Project.Extract&lt;IfcElement&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined property</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;prop1= n.GetIfcProperty(</span><span class="ts99">&quot;property name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined property in property set</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;prop2= n.GetIfcProperty(</span><span class="ts99">&quot;property name&quot;</span><span class="ts76">,</span><span class="ts99">&quot;pset name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ prop1, prop2 };</span><br /><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts137">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcPropSet"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcPropertySet&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Gets IFC object's property set (as GeometryGymIfc.Ifc.</span><span class="ts138">IfcP</span><span class="ts138">ropertySet</span><span class="ts131">) with name of set. </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcPropertySet(</span><span class="ts107">&nbsp;PropertySet&nbsp;</span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">PropertySet </span><span class="ts80">: </span><span class="ts82">Name of property set (Case-Sensitive)</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcPropSets"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcPropertySets&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Gets list of all property sets associated with the IFC object . </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcPropertySets()</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcQnt"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcQuantity&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts130">&nbsp;</span><span class="ts131">Gets IFC object's quantity (as GeometryGymIfc.Ifc.</span><span class="ts138">IfcPhysicalQuantity</span><span class="ts131">) with name of quantity. </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcQuantity( </span><span class="ts107">QuantityName, QuantitySet&nbsp;</span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">QuantityName </span><span class="ts80">:</span><span class="ts87">&nbsp;</span><span class="ts82">Name of </span><span class="ts82">quantity</span><span class="ts82">&nbsp;(Case-Sensitive)</span></p>
<p class="ps55"><span class="ts108">QuantitySet </span><span class="ts80">(Optional): </span><span class="ts82">Name of </span><span class="ts82">quantity</span><span class="ts82">&nbsp;set</span><span class="ts82">&nbsp;or element quantity</span><span class="ts82">&nbsp;(Case-Sensitive)</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<p class="ps62"><span class="ts93">Usage samples:</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading IFC:</span><br /><span class="ts96">DatabaseIfc db = </span><span class="ts95">new</span><span class="ts96">&nbsp;DatabaseIfc(</span><span class="ts109">@&quot;C:\Sample.ifc&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;db.Project.Extract&lt;IfcElement&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined quantity</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;q1= n.GetIfcQuantity(</span><span class="ts99">&quot;quantity name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined quantity in quantity set</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;q2= n.GetIfcQuantity(</span><span class="ts99">&quot;quantity name&quot;</span><span class="ts76">, </span><span class="ts99">&quot;qset name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ q1, q2 };</span><br /><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts137">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcQntSet"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcQuantitySet&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts101">&nbsp;</span><span class="ts131">Gets IFC object's quantity set (as GeometryGymIfc.Ifc.</span><span class="ts139">IfcElementQuantity</span><span class="ts131">) with name of set.&nbsp; </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcQuantitySet( </span><span class="ts107">QuantitySet&nbsp;</span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">QuantitySet </span><span class="ts80">: </span><span class="ts82">Name of </span><span class="ts82">quantity</span><span class="ts82">&nbsp;set</span><span class="ts82">&nbsp;or element quantity</span><span class="ts82">&nbsp;(Case-Sensitive)</span></p>
<p class="ps54"><span class="ts140">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GifcQntSets"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetIfcQuantitySets&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts131">&nbsp;Gets list of all quantity sets (Element Quantities) associated with the IFC object.&nbsp; </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">GeometryGymIfc.Ifc.</span><span class="ts87">IfcObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetIfcQuantitySets()</span></p>
<p class="ps55"><span class="ts82">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_DR2MODEL2"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetModelObjectOfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Drawing object is </span><span class="ts80">not </span><span class="ts79">the same as model object. Drawings are just presentations of the model objects. This function takes a single drawing object (from </span><span class="ts80">TSD</span><span class="ts79">&nbsp;namespace) and retrieves related object (of type &quot;T&quot;) in model.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">DrawingObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetModelObjectOfType&lt;T&gt;()</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps59"><span class="ts133">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.IsValidModelObjectOfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;p = n.GetModelObjectOfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;p </span><span class="ts95">by</span><span class="ts96">&nbsp;p.Identifier.ID </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = g.First().Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = g.First().GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;ZStart = g.First().StartPoint.Z </span><span class="ts111">//Without rounding</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;ZEnd = Math.Round(g.First().EndPoint.Z, 2) </span><span class="ts111">//With rounding</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight, ZStart, ZEnd };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (Command):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><br /><span class="ts111">//Walking through selected &quot;Part&quot; objects (in drawing):</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Making sure that the item is &quot;Beam&quot; (in model):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(item.IsValidModelObjectOfType&lt;Beam&gt;())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting the related &quot;Beam&quot; (in model)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;beam = item.GetModelObjectOfType&lt;Beam&gt;();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;ColorInModel = beam.Class;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(ColorInModel == </span><span class="ts99">&quot;2&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Attributes.VisibleLines.Color = TSD.DrawingColors.Red;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts96">MyDrawing.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note1: </span><span class="ts79">Drawing objects are </span><span class="ts80">not </span><span class="ts79">the same as model objects. Drawings are just presentations of the model objects. Drawing object types are stored in </span><span class="ts80">TSD </span><span class="ts79">(</span><span class="ts80">T</span><span class="ts79">ekla.</span><span class="ts80">S</span><span class="ts79">tructures.</span><span class="ts80">D</span><span class="ts79">rawing) namespace alias in order to avoid conflicting with model object names. Here is a quick comparison:</span></p>
<p class="ps22"><img width="328" height="225" border="0" src="images/image(18).png" /></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps22"><img width="555" height="188" border="0" src="images/image(30).png" /></p>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note2:</span><span class="ts79">&nbsp;It can be used with </span><a href="idh-topic150.htm#TB1_DDV" class="hs7">DrawingDatabase</a><span class="ts79">&nbsp;variable and is only accessible in drawings.</span></p>
<p class="ps43"><span class="ts92">Note3:</span><span class="ts79">&nbsp;</span><span class="ts141">OfType&lt;&gt;()</span><span class="ts79">&nbsp;method is used for filtering object types. Click </span><a href="idh-topic100.htm#TipOfType" class="hs7">here</a><span class="ts79">&nbsp;to find more.</span></p>
<p class="ps43"><span class="ts92">Note4:</span><span class="ts79">&nbsp;After grouping </span><span class="ts81">inside</span><span class="ts79">&nbsp;query body, </span><span class="ts141">First()</span><span class="ts79">&nbsp;method is used to get one instance (first one) from each group. Click </span><a href="idh-topic100.htm#TipFirst" class="hs7">here</a><span class="ts79">&nbsp;to find more.</span></p>
<p class="ps43"><span class="ts92">Note5:</span><span class="ts79">&nbsp;Use this function with </span><a href="idh-topic150.htm#TB1_IsValidModelObj" class="hs7">IsValidModelObjectOfType&lt;T&gt;</a><span class="ts79">&nbsp;to avoid </span><span class="ts81">null</span><span class="ts79">&nbsp;exceptions.&nbsp;</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_DR2MODEL"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetModelObjectsOfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Drawing objects are </span><span class="ts80">not </span><span class="ts79">the same as model objects. Drawings are just presentations of the model objects. This function takes drawing object collection and retrieves related object collection (of type &quot;T&quot;) in model. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">IEnumerable&lt;DrawingObject&gt;</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetModelObjectOfType&lt;T&gt;()</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.GetModelObjectsOfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;It can be used with </span><a href="idh-topic150.htm#TB1_DDV" class="hs7">DrawingDatabase</a><span class="ts79">&nbsp;variable and is only accessible in drawings. (Discussed more </span><a href="idh-topic50.htm#FSD3" class="hs7">here</a><span class="ts79">)</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_GetNormalVector"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetNormalVector&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Returns the </span><span class="ts82">normal</span><span class="ts82">&nbsp;vector of the </span><span class="ts82">contour plate</span><span class="ts82">.</span></p>
<p class="ps22"><img width="254" height="244" border="0" src="images/image(13).png" /></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">ContourPlate</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetNormalVector()</span></p>
<p class="ps62">&nbsp;</p>
<div class="block4">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_Get1Point"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">GetPoint</span><span class="ts90">&quot;</span></p>
<p class="ps61"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Converts a contour point to point. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">ContourPoint</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetPoint()</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts115">&nbsp;</span><a name="TB1_PointList"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">GetPointList</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Gets list of points inside a collection. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;ContourPoint&gt;</span><span class="ts79">&nbsp;/ Beam / PolyBeam / ContourPlate / Reinforcement&nbsp;/ PointList</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetPointList()</span></p>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-1(Model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart = m1.PickObjectOfType&lt;Part&gt;();</span><br /><br /><span class="ts111">//Getting node list for selected part:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;nodes = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;PickedPart.GetPointList().Round(3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.X, n.Y, n.Z };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;nodes;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<div align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p><span class="ts94">Sample-2(Drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><br /><span class="ts111">//Getting node list for selected polygon in drawing:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;nodes = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Polygon&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;Point p </span><span class="ts95">in</span><span class="ts96">&nbsp;n.Points.GetPointList().Round(3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ p.X, p.Y, p.Z };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;nodes;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts33">&nbsp;</span></p>
<p class="ps62">&nbsp;</p>
<div class="block4">
  <div class="hline0"></div>
</div>
<p class="ps62"><a name="TB1_DRAWINGS"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetSelectedDrawings&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function returns the collection of selected drawings (in document manager / drawing list).</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetSelectedDrawings()</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MySelectedDrawings = m1.GetSelectedDrawings();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;MySelectedDrawings.OfType&lt;TSD.AssemblyDrawing&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Title1 = </span><span class="ts99">&quot;Any prefix &quot;</span><span class="ts96">&nbsp;+ item.Title1 + </span><span class="ts99">&quot;Any suffix&quot;</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts142">&nbsp;</span><a name="TB1_POUT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetTeklaPullOut&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function returns pull-out picture for </span><span class="ts80">numbered</span><span class="ts79">&nbsp;reinforcements.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Reinforcement</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetTeklaPullOut( </span><span class="ts107">ImageWidth</span><span class="ts96">, </span><span class="ts107">ImageHeight</span><span class="ts96">, </span><span class="ts107">FontSize</span><span class="ts96">, </span><span class="ts107">FontColor</span><span class="ts96">, </span><span class="ts107">ScaleType</span><span class="ts96">, </span><span class="ts107">RotationAxis</span><span class="ts96">, </span><span class="ts107">Dimensions</span><span class="ts96">, </span><span class="ts107">Exaggeration</span><span class="ts96">, </span><span class="ts107">BendingAngle </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">ImageWidth</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Indicates approximate width of image in pixel. Min: 60, Default: 150</span></p>
<p class="ps55"><span class="ts108">ImageHeight</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Indicates approximate height of image in pixel. Min: 30, Default: 100</span></p>
<p class="ps55"><span class="ts108">FontSize</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Indicate font size on pull-out picture. Min: 1, Max:6, Default: 3</span></p>
<p class="ps55"><span class="ts108">FontColor</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Indicates font color (1~13). 1: Black, 2: Red, 3: Green, ... Default: 1</span></p>
<p class="ps55"><span class="ts108">ScaleType</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">If you set it to true, the shape becomes out of proportion to fit the available space. Default: false</span></p>
<p class="ps55"><span class="ts108">RotationAxis</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">0 = by view , 1 = by global Z , 2 = by local axis. Default: 2 (local axis)</span></p>
<p class="ps55"><span class="ts108">Dimensions</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">true / false. Default: true</span></p>
<p class="ps55"><span class="ts108">Exaggeration</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">true / false. Default: true</span></p>
<p class="ps55"><span class="ts108">BendingAngle</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">true / false. Default: true</span></p>
<p class="ps73">&nbsp;</p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Using default values for all parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut()</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Overriding the first and second parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut(110, 110)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Overriding the first five parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut(110, 90, 2, 2, </span><span class="ts121">false</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Overriding the &quot;FontColor&quot; parameter:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut(FontColor: 2)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Overriding the &quot;FontSize&quot; and &quot;ImageHeight&quot; parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut(FontSize: 2, ImageHeight: 110)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Overriding the &quot;RotationAxis&quot; parameter:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaPullOut(RotationAxis: 0)</span></p>
<p class="ps78"><span class="ts143">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pos = r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pic = r.GetTeklaPullOut()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ pos, pic };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts79">It's </span><span class="ts80">highly</span><span class="ts79">&nbsp;recommended to remove duplicate rows (discussed more </span><a href="idh-topic50.htm#FirstSamRebar" class="hs7">here</a><span class="ts79">) before</span><span class="ts80">&nbsp;</span><span class="ts79">using this method to increasing the performance:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (For Parts):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;r </span><span class="ts95">by</span><span class="ts96">&nbsp;r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">) </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;rebar = g.First()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pos = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pic = rebar.GetTeklaPullOut(FontColor:2)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ pos, pic };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (For Cast Units and/or Rebar Assemblies):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Assembly&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;r </span><span class="ts95">by</span><span class="ts96">&nbsp;r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">) </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;rebar = g.First()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pos = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;pic = rebar.GetTeklaPullOut(FontColor:2)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ pos, pic };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts144">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note1:</span><span class="ts79">&nbsp;If you need more customization, take a look at </span><span class="ts80">&quot;</span><span class="ts87">rebar_config.inp&quot;</span><span class="ts82">&nbsp;file defined by the advanced option </span><span class="ts52">XS_SYSTEM </span><span class="ts82">(Learn more </span><a href="https://teklastructures.support.tekla.com/2020/en/dra_reinforcement_rebar_config_inp" target="_blank" class="hs7">here</a><span class="ts82">). </span></p>
<p class="ps43"><span class="ts92">Note2:</span><span class="ts79">&nbsp;Make sure that rebar numbers are up to date while using this method (otherwise the result will be </span><span class="ts80">null</span><span class="ts79">):</span></p>
<p class="ps46"><img width="334" height="184" border="0" src="images/numbering.png" /><span class="ts145">&nbsp;</span><span class="ts146">or </span><img width="270" height="171" border="0" src="images/nui1.png" /><span class="ts145">&nbsp;</span></p>
<p class="ps5"><span class="ts63">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GTR"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetTeklaReport&quot;&nbsp;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns predefined Tekla template properties from the </span><span class="ts82">model objects. it returns </span><span class="ts87">&quot;-&quot;</span><span class="ts82">&nbsp;(by default) if failed to retrieve that attribute. </span><span class="ts82">The input is not case sensitive </span><a href="idh-topic150.htm#TB1_USmart" class="hs7">by default</a><span class="ts82">.</span><span class="ts82">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">ModelObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetTeklaReport( </span><span class="ts107">Property</span><span class="ts96">, </span><span class="ts107">Precision</span><span class="ts96">, </span><span class="ts107">UseSmartInput, IfNotFound</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Property</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Tekla Template Property. (</span><span class="ts88">e.g.</span><span class="ts79">&nbsp;&quot;LENGTH_NET&quot; or &quot;GUID&quot; or &quot;PART_POS&quot; or...) </span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0, Max=9</span></p>
<p class="ps55"><a name="TB1_USmart"></a><span class="ts108">UseSmartInput</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Converts letters to uppercase and replace white spaces with underscore (e.g. &quot;Abc&nbsp; D&quot; -&gt; &quot;ABC_D&quot;).</span><span class="ts82">&nbsp;Default= true</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found</span><span class="ts79">. Default: &quot;-&quot;</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting wight of object with default precision:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaReport(</span><span class="ts120">&quot;WEIGHT_NET&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting length of object (with smart input) and overriding the precision:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaReport(</span><span class="ts120">&quot;length net&quot;</span><span class="ts117">, 4)</span></p>
<p class="ps78"><span class="ts65">&nbsp;</span></p>
<p class="ps79"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">&nbsp;) </span><span class="ts111">//With default precision: 2</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Length = n.GetTeklaReport(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">, 4) </span><span class="ts111">&nbsp;//Precision: 4</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;PhaseNumber = n.GetTeklaReport(</span><span class="ts99">&quot;phase&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Weight, Length, PhaseNumber };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;n </span><span class="ts95">by</span><span class="ts96">&nbsp;n.Profile.ProfileString </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;ProfileName = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Without rounding after summation:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalWeight = g.Sum(x =&gt; (</span><span class="ts95">double</span><span class="ts96">)x.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">))</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//With rounding after summation:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalLength = Math.Round(g.Sum(x =&gt; (</span><span class="ts95">double</span><span class="ts96">)x.GetTeklaReport(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">)), 3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ ProfileName, TotalWeight, TotalLength };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;This function's input is flexible and is </span><span class="ts80">not</span><span class="ts79">&nbsp;case sensitive </span><span class="ts81">by default</span><span class="ts79">. So, &quot;LENGTH_NET&quot; and &quot;length_net&quot; and &quot;length net&quot; gives the same results. But you can turn off this feature with </span><a href="idh-topic150.htm#TB1_USmart" class="hs7">UseSmartInput</a><span class="ts79">&nbsp;parameter to get template attribute with its </span><span class="ts81">exact</span><span class="ts79">&nbsp;name (case sensitive).</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;</span><span class="ts82">This function returns the value in </span><span class="ts87">dynamic</span><span class="ts82">&nbsp;format. You can get numeric (or DateTime) values with safe converter ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) methods or by using </span><a href="idh-topic150.htm#TB1_GTRT" class="hs7">generic version</a><span class="ts82">.</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can also define precision for numeric values. It is optional and also has </span><span class="ts80">no</span><span class="ts79">&nbsp;effect on non-numeric values.</span></p>
<p class="ps66"><span class="ts92">Note:</span><span class="ts79">&nbsp;This function accepts template attributes. Some attributes can be found on &quot;View Filter&quot;&nbsp;dialog box and complete list can be found on &quot;Template Attribute Reference Guide&quot; or &quot;</span><span class="ts87">contentattributes_global.lst</span><span class="ts82">&quot; file (Important: Do not edit that file). Read more </span><a href="https://teklastructures.support.tekla.com/2021/en/sys_app_template_fields" target="_blank" class="hs7">here</a><span class="ts82">.</span></p>
<p class="ps80"><img width="400" height="310" border="0" src="images/templateattributes1.png" /><span class="ts17">&nbsp;&nbsp; </span><img width="400" height="326" border="0" src="images/image(52).png" /></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GTRT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetTeklaReport&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_GTR" class="hs7">GetTeklaReport</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime).&nbsp; In fact, This method uses </span><span class="ts82">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) internally.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">ModelObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetTeklaReport&lt;T&gt;( </span><span class="ts107">Property</span><span class="ts96">, </span><span class="ts107">Precision</span><span class="ts96">, </span><span class="ts107">UseSmartInput, IfNotFound, styles, CustomFormat, provider</span><span class="ts96">&nbsp;)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Property</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Tekla Template Property. (</span><span class="ts88">e.g.</span><span class="ts79">&nbsp;&quot;LENGTH_NET&quot; or &quot;GUID&quot; or &quot;PART_POS&quot; or...) </span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0, Max=9</span></p>
<p class="ps55"><span class="ts108">UseSmartInput</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts87">&nbsp;</span><span class="ts82">Converts letters to uppercase and replace white spaces with underscore (e.g. &quot;Abc&nbsp; D&quot; -&gt; &quot;ABC_D&quot;).</span><span class="ts82">&nbsp;Default= true</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found</span><span class="ts79">. Default: &quot;-&quot;</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting wight of object with default precision:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaReport</span><span class="ts117">&lt;</span><span class="ts95">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;WEIGHT_NET&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting length of object (with smart input) and overriding the precision:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTeklaReport</span><span class="ts117">&lt;</span><span class="ts95">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;length net&quot;</span><span class="ts117">, 4)</span></p>
<p class="ps76">&nbsp;</p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;n </span><span class="ts95">by</span><span class="ts96">&nbsp;n.Profile.ProfileString </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;ProfileName = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Without rounding after summation:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalWeight = g.Sum(x =&gt; x.GetTeklaReport&lt;</span><span class="ts95">double</span><span class="ts96">&gt;(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">))</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//With rounding after summation:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalLength = Math.Round(g.Sum(x =&gt; x.GetTeklaReport&lt;</span><span class="ts95">double</span><span class="ts96">&gt;(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">)), 3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ ProfileName, TotalWeight, TotalLength };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GTUDA"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetTeklaUDA&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Use this function to retrieve user defined attribute text from </span><span class="ts82">model objects. Returns </span><span class="ts87">empty string</span><span class="ts82">&nbsp;for empty fields (or if failed to retrieve the attribute). This function returns the value in </span><span class="ts87">text</span><span class="ts82">&nbsp;(string) format. You can get numeric (or DateTime) values with safe converter ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) methods (see sample-2) or by using </span><a href="idh-topic150.htm#TB1_GTUDAT" class="hs7">generic version</a><span class="ts82">.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts147">&nbsp;</span><span class="ts82">ModelObject</span><span class="ts82">, ProjectInfo</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetTeklaUDA( </span><span class="ts107">UDAProperty</span><span class="ts96">, </span><span class="ts107">UseSmartInput, IfNotFound</span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">UDAProperty</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">User defined attribute. (</span><span class="ts88">e.g.</span><span class="ts79">&nbsp;&quot;user field 1&quot; or &quot;comment&quot; or &quot;xs_shorten&quot; or...)</span></p>
<p class="ps55"><a name="TB1_USmart2"></a><span class="ts108">UseSmartInput</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Use input as case insensitive </span><span class="ts82">and replace white spaces with underscore</span><span class="ts82">. Default= true </span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found</span><span class="ts79">. Default: Empty text </span><span class="ts148">(Updated)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting &quot;user filed 1&quot;:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTekla</span><span class="ts117">UDA</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">USER</span><span class="ts120">_</span><span class="ts120">FIELD_1</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting the value entered in the </span><span class="ts149">Shorten box</span><span class="ts116">&nbsp;on the Parameters tab:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTekla</span><span class="ts117">UDA</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">xs shorten</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Returns empty string (&quot;&quot;) because of invalid attribute name:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTekla</span><span class="ts117">UDA</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">shorten</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps78"><span class="ts65">&nbsp;</span></p>
<p class="ps79"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;comment = n.GetTeklaUDA(</span><span class="ts99">&quot;comment&quot;</span><span class="ts96">&nbsp;)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;shorten = n.GetTeklaUDA(</span><span class="ts99">&quot;xs shorten&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UDA1 = n.GetTeklaUDA(</span><span class="ts99">&quot;user field 1&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ comment , shorten , UDA1 };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get UDA as numeric value:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;shorten = AsDouble(n.GetTeklaUDA(</span><span class="ts99">&quot;xs shorten&quot;</span><span class="ts96">), 3)&nbsp;&nbsp; </span><span class="ts111">//Precision: 3</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;shorten &gt; 0</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UDA1 = n.GetTeklaUDA(</span><span class="ts99">&quot;user field 1&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ shorten, UDA1 };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;User defined attributes can be found on &quot;Template Attribute Reference Guide&quot; or &quot;</span><span class="ts87">contentattributes_userdefined.lst</span><span class="ts82">&quot; file. Read more </span><a href="https://teklastructures.support.tekla.com/2021/en/sys_app_template_fields" target="_blank" class="hs7">here</a><span class="ts82">.</span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps81"><img width="400" height="326" border="0" src="images/image(52).png" /></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;This function's input is flexible and is </span><span class="ts80">not</span><span class="ts79">&nbsp;case sensitive by default. So, &quot;USER_FIELD_1&quot; and &quot;user field 1&quot; gives the same results. But you can turn off this feature with </span><a href="idh-topic150.htm#TB1_USmart2" class="hs7">UseSmartInput</a><span class="ts79">&nbsp;parameter to get UDA with its exact name (case sensitive).</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;Keep in mind that </span><span class="ts82">the input of </span><a href="https://developer.tekla.com/tekla-structures/api/14/14453" target="_blank" class="hs7">SetUserProperty</a><span class="ts79">&nbsp;Method</span><span class="ts82">&nbsp;i</span><span class="ts79">s not flexible and is always case sensitive (</span><span class="ts82">Because it belongs to the original Tekla API&nbsp; not xAPI </span><span class="ts79">). </span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GTUDAT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetTeklaUDA&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_GTR" class="hs7">GetTeklaUDA</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime). In fact, This method uses </span><span class="ts82">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) internally.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts147">&nbsp;</span><span class="ts82">ModelObject</span><span class="ts82">, ProjectInfo</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetTeklaUDA&lt;T&gt;( </span><span class="ts107">UDAProperty, Precision, UseSmartInput, IfNotFound, styles, CustomFormat, provider</span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">UDAProperty</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">User defined attribute. (</span><span class="ts88">e.g.</span><span class="ts79">&nbsp;&quot;user field 1&quot; or &quot;comment&quot; or &quot;xs_shorten&quot; or...)</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><a name="TB1_USmart2"></a><span class="ts108">UseSmartInput</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Use input as case insensitive </span><span class="ts82">and replace white spaces with underscore</span><span class="ts82">. Default= true</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found</span><span class="ts79">. Default: Empty Text</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p><span class="ts93">Syntax guide:</span></p>
<p><span class="ts137">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Getting the value entered in the </span><span class="ts149">Shorten box</span><span class="ts116">&nbsp;on the Parameters tab as </span><span class="ts149">double</span><span class="ts116">&nbsp;and overriding the precision:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">GetTekla</span><span class="ts117">UDA&lt;</span><span class="ts95">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">xs shorten</span><span class="ts120">&quot;</span><span class="ts124">, 4</span><span class="ts117">)</span></p>
<p class="ps76">&nbsp;</p>
<p class="ps82"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get UDA as numeric value:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;shorten = n.GetTeklaUDA&lt;</span><span class="ts95">double</span><span class="ts96">&gt;(</span><span class="ts99">&quot;xs shorten&quot;</span><span class="ts96">, 3)&nbsp;&nbsp; </span><span class="ts111">//Precision: 3</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;shorten &gt; 0</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UDA1 = n.GetTeklaUDA(</span><span class="ts99">&quot;user field 1&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ shorten, UDA1 };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GetVector"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetVector&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;</span><span class="ts82">Returns the direction vector of the beam.</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps22"><img width="125" height="156" border="0" src="images/image(12).png" /></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Beam</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetVector()</span></p>
<div class="block4">
  <div class="hline0"></div>
</div>
<p class="ps65"><span class="ts17">&nbsp;</span></p>
<p class="ps0"><a name="TB1_XYZList"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;GetXYZList&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts116">&nbsp;</span><span class="ts82">Gets (x,y,z) list from collection of points or contour points or DXF points.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;</span><span class="ts79">Point</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">ContourPoint</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/&nbsp; </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">netDxf.Entities.Point</span><span class="ts79">&gt;</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.GetXYZList()</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts111">//Getting node list for selected part:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;PickedPart.GetPointList().GetXYZList();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_MDHighlighter"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;Highlight&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Highlight</span><span class="ts82">s</span><span class="ts82">&nbsp;</span><span class="ts82">the collection of </span><span class="ts82">existing model</span><span class="ts82">&nbsp;(or drawing)</span><span class="ts82">&nbsp;object</span><span class="ts82">s</span><span class="ts82">&nbsp;</span><span class="ts82">visually in model (or drawing).</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;ModelObject&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;DrawingObject&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">ArrayList</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.Highlight( </span><span class="ts107">KeepCurrentSelection</span><span class="ts96">&nbsp;)</span></p>
<p class="ps43"><span class="ts91">Parameters </span><span class="ts100">(Only in drawing)</span><span class="ts150">:</span></p>
<p class="ps55"><span class="ts108">KeepCurrentSelection</span><span class="ts80">&nbsp;(Optional) </span><span class="ts79">&nbsp;Defines whether the selector keeps the currently selected objects selected or not. Default: false</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (Model Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Highlighting some parts in model (based on their properties):</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyCollection = (</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">) &gt;= 100</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.StartPoint.Z &gt; 3000 &amp;&amp; n.EndPoint.X &gt; 1000</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.Profile.ProfileString.StartsWith(</span><span class="ts99">&quot;HEA&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Hint: Don't use new{...} because it changes the original type:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n).Highlight();</span><br /><br /><span class="ts111">//Showing some data about highlighted beams in data grid:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;MyCollection.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.StartPoint, n.EndPoint });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (Drawing Query):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Highlighting some parts in drawing (based on their properties in model):</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyCollection = (</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Making sure that the item is a &quot;Beam&quot;:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.IsValidModelObjectOfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting the relevant &quot;Beam&quot; object (in moel):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;beam = n.GetModelObjectOfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Applying conditions:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;beam.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">) &gt;= 100</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;beam.StartPoint.Z &gt; 3000 &amp;&amp; beam.EndPoint.X &gt; 1000</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;beam.Profile.ProfileString.StartsWith(</span><span class="ts99">&quot;HEA&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Hint: Don't use new{...} because it changes the original type:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n).Highlight();</span><br /><br /><span class="ts111">//Showing some data about highlighted beams in data grid:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;MyCollection.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.StartPoint, n.EndPoint });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (Model Command):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Highlighting some parts in model (based on their properties):</span><br /><span class="ts96">ArrayList temp = </span><span class="ts95">new</span><span class="ts96">&nbsp;ArrayList();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;condition1 = item.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">) &gt;= 2500;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;condition2 = item.StartPoint.Z &gt; 3000 &amp;&amp; item.EndPoint.X &gt; 1000;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;condition3 = item.Profile.ProfileString.StartsWith(</span><span class="ts99">&quot;HEA&quot;</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(condition1 &amp;&amp; condition2 &amp;&amp; condition3)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp.Add(item);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyCollection = temp.Highlight();</span><br /><br /><span class="ts111">//Showing some data about highlighted beams in data grid:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;MyCollection.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.StartPoint, n.EndPoint });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps56"><a name="TB1_IfcVal"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;IfcValue&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts131">&nbsp;</span><span class="ts131">Gets text&nbsp;value of IFC property</span><span class="ts131">&nbsp;(or quantity) </span><span class="ts104">(Powered by </span><a href="https://github.com/GeometryGym/GeometryGymIFC" target="_blank" class="hs9">GeometryGymIfc</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">GeometryGy</span><span class="ts82">m.Ifc.</span><span class="ts87">IfcProperty</span><span class="ts79">&nbsp;/ GeometryGy</span><span class="ts82">m.Ifc.</span><span class="ts80">IfcPhysicalQuantity</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.IfcValue( </span><span class="ts107">IfNotFound</span><span class="ts96">&nbsp;)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Value to return if no valid data found. Default: Empty text</span><span class="ts82">&nbsp;for properties and 0 (zero) for quantities</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Usage samples:</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading IFC:</span><br /><span class="ts96">DatabaseIfc db = </span><span class="ts95">new</span><span class="ts96">&nbsp;DatabaseIfc(</span><span class="ts109">@&quot;C:\Sample.ifc&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;db.Project.Extract&lt;IfcElement&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined property</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;prop1 = n.GetIfcProperty(</span><span class="ts99">&quot;prop Name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Get user-defined quantity</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;qnt1 = n.GetIfcQuantity(</span><span class="ts99">&quot;quantity name&quot;</span><span class="ts96">).IfcValue()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ prop1, qnt1 };</span><br /><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts137">&nbsp;</span></p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GetUI"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;InputBox&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;Shows a pop-up window to receive input data from the user</span></p>
<p class="ps22"><img width="281" height="122" border="0" src="images/uiwin1.png" /></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;InputBox( </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps22">&nbsp;</p>
<p class="ps0"><span class="ts93">Parameters</span><span class="ts151">:</span></p>
<p class="ps55"><span class="ts108">prompt</span><span class="ts80">&nbsp;(Optional)</span><span class="ts87">&nbsp;</span><span class="ts82">&nbsp;</span><span class="ts82">Text to display on header as a user guidance</span><span class="ts82">. Default: &quot;</span><span class="ts82">&gt;&gt; Awaiting user input...</span><span class="ts82">&quot;</span></p>
<p class="ps73">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_GetUIT"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;InputBox&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;Generic version of </span><a href="idh-topic150.htm#TB1_GetUI" class="hs7">InputBox</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime).&nbsp; In fact, This method uses </span><span class="ts82">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) internally.&nbsp; (code-snippet: </span><span class="ts87">ibox</span><span class="ts82">)</span></p>
<p class="ps22">&nbsp;</p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;InputBox&lt;T&gt;( </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">prompt</span><span class="ts80">&nbsp;(Optional)</span><span class="ts87">&nbsp;</span><span class="ts82">&nbsp;</span><span class="ts82">Text to display on header as a user guidance</span><span class="ts82">. Default: &quot;</span><span class="ts82">&gt;&gt; Awaiting user input...</span><span class="ts82">&quot;</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps73"><span class="ts137">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_IsLike"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Is</span><span class="ts90">Like&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;</span><span class="ts82">Performs pattern matching </span><span class="ts82">that also supports</span><span class="ts82">&nbsp;wildcards</span><span class="ts82">&nbsp;(</span><span class="ts88">e.g.</span><span class="ts82">&nbsp;</span><span class="ts87">*</span><span class="ts82">&nbsp;and</span><span class="ts82">&nbsp;</span><span class="ts87">?</span><span class="ts82">&nbsp;</span><span class="ts82">)</span><span class="ts82">. Returns t</span><span class="ts82">rue if the strings match. otherwise, </span><span class="ts82">f</span><span class="ts82">alse</span><span class="ts82">. </span></p>
<p class="ps43"><span class="ts82">You can also choose more than one pattern. In this case, separate the different patterns with a comma (by </span><a href="idh-topic150.htm#TB1_PatDelimiter" class="hs7">default</a><span class="ts82">). </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">String (text)</span></p>
<p class="ps5"><span class="ts152">&nbsp;</span></p>
<div class="block5" align="left">
  <table class="tbl9">
    <tr class="row0">
      <td class="cell0" colspan="3">
        <p class="ps30"><span class="ts153">General Pattern Rules</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps24"><span class="ts154">Char.</span></p>
      </td>
      <td class="cell2">
        <p class="ps24"><span class="ts154">Description</span></p>
      </td>
      <td class="cell3">
        <p class="ps24"><span class="ts154">Example</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">*</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Matches </span><span class="ts82">zero or more of any character </span><span class="ts79">. You can use the asterisk (</span><span class="ts80">*</span><span class="ts79">) anywhere in a character string.</span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">wh*</span><span class="ts79">&nbsp;finds what, white, and why, but not awhile or watch. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">?</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Matches any single alphabet in a specific position. </span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">b?ll</span><span class="ts79">&nbsp;finds ball, bell, and bill.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">#</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Matches any single digit (0-9).</span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">1#</span><span class="ts79">&nbsp;finds 10, 11, 12, ..., 19</span></p>
        <p class="ps42"><span class="ts134">&nbsp;</span></p>
        <p class="ps42"><span class="ts80">1#3</span><span class="ts79">&nbsp;finds 103, 113, ..., 193.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">[ ]</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Matches characters within the brackets.</span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">b[ae]ll</span><span class="ts79">&nbsp;finds ball and bell, but not bill.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">!</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Excludes characters inside the brackets.</span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">b[!ae]ll</span><span class="ts79">&nbsp;finds bill and bull, but not ball or bell.</span></p>
        <p class="ps42"><span class="ts134">&nbsp;</span></p>
        <p class="ps83"><span class="ts80">&ldquo;[!a]*&rdquo;</span><span class="ts79">&nbsp;finds all items that do not begin with the letter a.</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell4">
        <p class="ps30"><span class="ts155">-</span></p>
      </td>
      <td class="cell5">
        <p class="ps42"><span class="ts79">Matches a range of characters (or </span><span class="ts81">single</span><span class="ts79">&nbsp;digit</span><span class="ts86">*</span><span class="ts79">). Remember to specify the characters in </span><span class="ts81">ascending</span><span class="ts79">&nbsp;order (A to Z, not Z to A).</span></p>
        <p class="ps84"><span class="ts156">*</span><span class="ts157">Numeric r</span><span class="ts157">anges</span><span class="ts157">&nbsp;with more than one digit</span><span class="ts157">&nbsp;cannot be defined (e.g. </span><span class="ts157">b/[</span><span class="ts157">1-</span><span class="ts157">24] is </span><span class="ts158">not</span><span class="ts157">&nbsp;valid</span><span class="ts157">)</span></p>
      </td>
      <td class="cell6">
        <p class="ps42"><span class="ts80">b[a-c]d</span><span class="ts79">&nbsp;finds bad, bbd, and bcd.</span></p>
        <p class="ps42"><span class="ts134">&nbsp;</span></p>
        <p class="ps42"><span class="ts80">b[1-5]</span><span class="ts79">&nbsp;finds b1, b2, ..., b5.</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.IsLike( </span><span class="ts107">Patterns</span><span class="ts96">, </span><span class="ts107">Delimiter</span><span class="ts96">, </span><span class="ts107">IgnoreCase</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Patterns:</span><span class="ts159">&nbsp;</span><span class="ts82">Matching pattern(s)</span><span class="ts82">&nbsp;string. You can separate different patterns with delimiter. The default delimiter is comma (,)</span></p>
<p class="ps55"><a name="TB1_PatDelimiter"></a><span class="ts108">Delimiter</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Delimiter string for patterns. Default: Comma </span><span class="ts80">&quot;,&quot;</span></p>
<p class="ps55"><span class="ts108">IgnoreCase</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Defines whether using case-sensitive comparison or not. Default: false (case sensitive)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;any text</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/*</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts116">will find everything with 2 characters in</span><span class="ts116">&nbsp;</span><span class="ts116">front of a &rsquo;</span><span class="ts116">4</span><span class="ts116">&rsquo; like w1</span><span class="ts116">4</span><span class="ts116">, w2</span><span class="ts116">4</span><span class="ts116">, </span><span class="ts116">HF4</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">??4</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts 0-9</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/#</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts96">or</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/[0-9]&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts 00-99</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/##</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts </span><span class="ts116">prefixed with </span><span class="ts116">b/ thru e/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">[b-e]/*</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts96">or</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">[bcde]/*</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts82">You can also choose more than one pattern:</span></p>
<p class="ps75"><span class="ts82">&nbsp;</span></p>
<p class="ps75"><span class="ts116">will find</span><span class="ts116">&nbsp;texts </span><span class="ts116">1</span><span class="ts116">,2,3</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/1, b/2, b/3</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps85"><img width="300" height="172" border="0" src="images/ilfunc.jpg" /></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts </span><span class="ts116">1</span><span class="ts116">-4</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/ or c/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">[bc]/1, [bc]/2, [bc]/3, [bc]/4</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts </span><span class="ts116">1</span><span class="ts116">-3</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/ thru e/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">[b-e]/1, [b-e]/2, [b-e]/3</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts 12-43</span><span class="ts116">&nbsp;prefixed with </span><span class="ts116">b/ (i.e. b/12~b/43)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/1[2-9], b/[2-3]#, b/4[0-3]&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts96">or</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/1[2-9], b/[2-3][0-9], b/4[0-3]&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">will find</span><span class="ts116">&nbsp;texts </span><span class="ts116">prefixed with </span><span class="ts116">b/ or c/</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">b/*, c/*</span><span class="ts120">&quot;</span><span class="ts117">)</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts96">or</span><span class="ts117">&nbsp;</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.IsLike</span><span class="ts117">(</span><span class="ts120">&quot;</span><span class="ts120">[bc]/*</span><span class="ts120">&quot;</span><span class="ts117">)</span></p>
<p class="ps78"><span class="ts160">&nbsp;</span></p>
<p>&nbsp;</p>
<p class="ps79"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;PartProfile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;PartPos = (</span><span class="ts95">string</span><span class="ts96">)n.GetTeklaReport(</span><span class="ts99">&quot;part pos&quot;</span><span class="ts96">)</span><br /><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;PartProfile.IsLike(</span><span class="ts99">&quot;???400&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;PartPos.IsLike(</span><span class="ts99">&quot;[bc]/*&quot;</span><span class="ts96">)</span><br /><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;length = n.GetTeklaReport(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ PartProfile, length, weight, PartPos };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts115">&nbsp;</span><a name="TB1_IsTapered"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">IsTapered</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Tells whether the reinforcement group is tapered or not (true / false).</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Reinforcement</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.IsTapered( </span><span class="ts107">Tolerance</span><span class="ts96">&nbsp;)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Tolerance</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Tolerance for detecting difference between bar group sections. Default: 0</span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Size = r.GetTeklaReport(</span><span class="ts99">&quot;size&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UnitLength = r.IsTapered() ? </span><span class="ts99">&quot;VAR&quot;</span><span class="ts96">&nbsp;: r.GetTeklaReport(</span><span class="ts99">&quot;length&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Size, UnitLength };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_IsValidModelObj"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;IsValidModelObjectOfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function controls the validity of a drawing object (in </span><span class="ts80">TSD</span><span class="ts79">&nbsp;namespase) as a model object (of type &quot;T&quot;).</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">DrawingObject</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.IsValidModelObjectOfType&lt;T&gt;()</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><br /><span class="ts111">//Walking through selected &quot;Part&quot; objects (in drawing):</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(item.IsValidModelObjectOfType&lt;ContourPlate&gt;())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(item.Attributes.DrawCenterLine == </span><span class="ts95">true</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Removing center line from contour plates (in drawing):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Attributes.DrawCenterLine = </span><span class="ts95">false</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts96">MyDrawing.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_LGroup"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">LengthInGroup</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns total length of rebar group (also works for tapered groups). </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Reinforcement</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.LengthInGroup( </span><span class="ts107">Precision </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of result. Default= 2, Min= 0, Max=9</span></p>
<p class="ps59"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Size = r.GetTeklaReport(</span><span class="ts99">&quot;size&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UnitLength = r.IsTapered() ? </span><span class="ts99">&quot;VAR&quot;</span><span class="ts96">&nbsp;: r.GetTeklaReport(</span><span class="ts99">&quot;length&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalLength = r.LengthInGroup()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Size, UnitLength, TotalLength };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_Lookup"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Lookup</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Performs match lookup in a DataTable's column (by name or index), and returns the corresponding text from another column (by name or index). You can&nbsp; get DataTable from valid delimited text files with </span><a href="idh-topic150.htm#TB1_DelimitedReader" class="hs7">ReadDelimitedData</a><span class="ts79">&nbsp;</span><span class="ts82">method.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts147">&nbsp;</span><span class="ts79">DataTable</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.Lookup( </span><span class="ts107">Key</span><span class="ts96">, </span><span class="ts107">InColumn</span><span class="ts96">, </span><span class="ts107">GetFromColumn</span><span class="ts96">, </span><span class="ts107">IfNotFound</span><span class="ts96">, </span><span class="ts107">IgnoreCase </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Key: </span><span class="ts79">Lookup item (in source column)</span></p>
<p class="ps55"><span class="ts108">InColumn:</span><span class="ts89">&nbsp;</span><span class="ts79">Source column name or column index (starts from zero)</span></p>
<p class="ps55"><span class="ts108">GetFromColumn:</span><span class="ts89">&nbsp;</span><span class="ts79">Target column name or column index (starts from zero)</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Value to return if no match found. Default: Empty text</span></p>
<p class="ps55"><span class="ts108">IgnoreCase</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Defines whether using case-sensitive comparison or not. Default: true</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Lookup item with column indexes:</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, InColumn: 0, GetFromColumn: 1, IfNotFound:</span><span class="ts117">&nbsp;</span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, 0, 1, </span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, 0, 1)</span></p>
<p class="ps64"><span class="ts118">&nbsp;</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Lookup item with column names:</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, InColumn: </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, GetFromColumn: </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">, IfNotFound: </span><span class="ts120">&quot;99&quot;</span><span class="ts117">);</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">, </span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">)</span></p>
<p class="ps78"><span class="ts160">&nbsp;</span></p>
<p class="ps37"><img width="304" height="164" border="0" src="images/lookupfunction.png" /></p>
<p class="ps86"><span class="ts137">&nbsp;</span></p>
<p class="ps79"><span class="ts93">Usage samples:</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Path to valid delimited text file:&nbsp;</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;path = </span><span class="ts109">@&quot;C:\Users\Me\Desktop\MyColors.dat&quot;</span><span class="ts96">;</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;DelimiterChar = </span><span class="ts99">&quot; &quot;</span><span class="ts96">;</span><br /><span class="ts111">//Reading data from data file: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;data = path.ReadDelimitedData(DelimiterChar);</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;KeyItem = item.Profile.ProfileString;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Class = data.Lookup(KeyItem,</span><span class="ts99">&quot;PROFILE&quot;</span><span class="ts96">, </span><span class="ts99">&quot;CLASS&quot;</span><span class="ts96">, </span><span class="ts99">&quot;99&quot;</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;</span><span class="ts82">If you want to get numerical value (integer or double) from </span><span class="ts85">Lookup</span><span class="ts82">&nbsp;method, You must cast the result explicitly or use </span><a href="idh-topic150.htm#TB1_LookupT" class="hs7">generic version</a><span class="ts82">&nbsp;of this method:</span></p>
<p class="ps42"><span class="ts76">- </span><a href="idh-topic150.htm#TB1_ADouble" class="hs11">AsDouble</a><span class="ts161">(</span><span class="ts161">M</span><span class="ts162">atchValue</span><span class="ts162">)</span><span class="ts76">&nbsp;</span><span class="ts163">Recommended</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">Convert</span><span class="ts162">.</span><span class="ts162">ToDouble(</span><span class="ts162">MatchValue</span><span class="ts162">)</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">double</span><span class="ts162">.Parse(MatchValue)</span></p>
<p class="ps42"><span class="ts165">&nbsp;</span></p>
<p class="ps42"><span class="ts76">- </span><a href="idh-topic150.htm#TB1_Aint" class="hs11">AsInteger</a><span class="ts161">(</span><span class="ts161">Ma</span><span class="ts162">tchValue</span><span class="ts162">)</span><span class="ts76">&nbsp;</span><span class="ts163">Recommended</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">Convert</span><span class="ts162">.</span><span class="ts162">ToInt32(</span><span class="ts162">MatchValue</span><span class="ts162">)</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">int</span><span class="ts162">.Parse(MatchValue)</span></p>
<p>&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_LookupT"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Lookup</span><span class="ts90">&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Generic version of </span><a href="idh-topic150.htm#TB1_Lookup" class="hs7">Lookup</a><span class="ts82">&nbsp;method that converts the result to</span><span class="ts79">&nbsp;type &quot;T&quot; (string/int/double/DateTime).&nbsp; In fact, This method uses </span><span class="ts82">safe converters ( </span><a href="idh-topic150.htm#TB1_ADouble" class="hs7">AsDouble</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_Aint" class="hs7">AsInteger</a><span class="ts82">&nbsp;/ </span><a href="idh-topic150.htm#TB1_ADate" class="hs7">AsDate</a><span class="ts82">&nbsp;) internally.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts147">&nbsp;</span><span class="ts79">DataTable</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.Lookup&lt;T&gt;( </span><span class="ts107">Key</span><span class="ts96">, </span><span class="ts107">InColumn</span><span class="ts96">, </span><span class="ts107">GetFromColumn</span><span class="ts96">, </span><span class="ts107">IfNotFound</span><span class="ts96">, </span><span class="ts107">IgnoreCase, Precision, styles, CustomFormat, provider </span><span class="ts96">)</span></p>
<p class="ps46"><span class="ts110">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">string, int, double, DateTime</span></p>
<p class="ps55"><span class="ts134">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Key: </span><span class="ts79">Lookup item (in source column)</span></p>
<p class="ps55"><span class="ts108">InColumn:</span><span class="ts89">&nbsp;</span><span class="ts79">Source column name or column index (starts from zero)</span></p>
<p class="ps55"><span class="ts108">GetFromColumn:</span><span class="ts89">&nbsp;</span><span class="ts79">Target column name or column index (starts from zero)</span></p>
<p class="ps55"><span class="ts108">IfNotFound</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Value to return if no match found. Default: Empty text</span></p>
<p class="ps55"><span class="ts108">IgnoreCase</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Defines whether using case-sensitive comparison or not. Default: true</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts79">Precision of numeric values. Default= 2, Min= 0 (</span><span class="ts82">has no effect on DateTime input type </span><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">styles </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Indicate the style elements that can be present</span><span class="ts79">. Default= </span><span class="ts119">NumberStyles.Any</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">CustomFormat </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Date and time format for string inputs. Default: &quot;M/d/yyyy&quot; </span><span class="ts79">(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings?redirectedfrom=MSDN" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps55"><span class="ts108">provider </span><span class="ts80">(Optional)</span><span class="ts79">:</span><span class="ts80">&nbsp;</span><span class="ts82">Provides information about a specific culture </span><span class="ts79">. Default= </span><span class="ts119">CultureInfo.CurrentCulture</span><span class="ts79">&nbsp;(Read more on </span><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps59"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Lookup item (as </span><span class="ts95">string</span><span class="ts96">,</span><span class="ts95">&nbsp;int</span><span class="ts96">&nbsp;or</span><span class="ts95">&nbsp;double</span><span class="ts116">) with column indexes:</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">string</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, InColumn: 0, GetFromColumn: 1, IfNotFound:</span><span class="ts117">&nbsp;</span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">int</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, 0, 1, </span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, 0, 1)</span></p>
<p class="ps64"><span class="ts118">&nbsp;</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Lookup item (as </span><span class="ts95">string</span><span class="ts96">,</span><span class="ts95">&nbsp;int</span><span class="ts96">&nbsp;or</span><span class="ts95">&nbsp;double</span><span class="ts116">) with column names:</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">string</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, InColumn: </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, GetFromColumn: </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">, IfNotFound: </span><span class="ts120">&quot;99&quot;</span><span class="ts117">);</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">int</span><span class="ts117">&gt;</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">, </span><span class="ts120">&quot;99&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Lookup</span><span class="ts117">&lt;</span><span class="ts95">double</span><span class="ts117">&gt;</span><span class="ts117">(</span><span class="ts120">&quot;HEA160&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PROFILE&quot;</span><span class="ts117">, </span><span class="ts120">&quot;CLASS&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_NSOfType"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;OfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts116">&nbsp;</span><span class="ts82">Returns list of </span><span class="ts87">all</span><span class="ts82">&nbsp;model</span><span class="ts82">&nbsp;or drawing</span><span class="ts82">&nbsp;objects with </span><span class="ts87">specified</span><span class="ts82">&nbsp;type</span><span class="ts82">&nbsp;&quot;T&quot;</span><span class="ts82">&nbsp;(Regardless of selected objects)</span><span class="ts82">.</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;OfType&lt;T&gt;()</span></p>
<p class="ps0"><span class="ts93">Type Parameters ( in model):</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps62"><span class="ts93">Type Parameters ( in drawing):</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Drawing object type (TSD.Text, TSD.Line, TSD.Part, ...)</span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (in drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;OfType&lt;TSD.Part&gt;().GetModelObjectsOfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;profile = n.Profile.ProfileString</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;weight = n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ profile, weight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;This method is </span><span class="ts80">much</span><span class="ts79">&nbsp;faster than using </span><a href="idh-topic150.htm#TB1_EMODEL" class="hs7">EntireModel</a><span class="ts79">&nbsp;and </span><a href="idh-topic150.htm#TB1_EDRAWING" class="hs7">EntireDrawing</a><span class="ts82">&nbsp;because directly returns all model/drawing objects with specific type (Instead of returning all model objects with all different types )</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_PartList"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PartList&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function returns the part list for the given assembly. (Discussed more </span><a href="idh-topic50.htm#TB1_SAM_PARTLIST" class="hs7">here</a><span class="ts79">).</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Assembly</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PartList( </span><span class="ts107">IncludingSubAssemblies </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">IncludingSubAssemblies</span><span class="ts80">&nbsp;(Optional):</span><span class="ts79">&nbsp;Including parts in sub assemblies. Default: true</span></p>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;a </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Assembly&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;Part p </span><span class="ts95">in</span><span class="ts96">&nbsp;a.PartList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ p.Profile.ProfileString };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (Without parts in sub-assemblies):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;result = </span><span class="ts95">from</span><span class="ts96">&nbsp;a </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Assembly&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;Part p </span><span class="ts95">in</span><span class="ts96">&nbsp;a.PartList(false)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ p.Profile.ProfileString };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_Pick1Face"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PickFace&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function asks the user to pick one face (outline plane) and returns its point list.</span></p>
<p class="ps22"><img width="248" height="130" border="0" src="images/image(15).png" /></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PickFace( </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Prompt</span><span class="ts80">&nbsp;(Optional):</span><span class="ts82">&nbsp;</span><span class="ts82">The string to display as a user guidance.</span><span class="ts82">&nbsp;Default: Empty text</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PointList = MyModel.PickFace(</span><span class="ts99">&quot;Pick&nbsp;a face...&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;PointList</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.X, n.Y, n.Z };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts82">or simpler:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyModel.PickFace(</span><span class="ts99">&quot;Pick&nbsp;a face...&quot;</span><span class="ts96">).GetXYZList();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PointList = MyModel.PickFace();</span><br /><br /><span class="ts96">ContourPlate cp = </span><span class="ts95">new</span><span class="ts96">&nbsp;ContourPlate();</span><br /><span class="ts96">cp.Contour.ContourPoints = PointList.GetContourPointList().GetArray(); ;</span><br /><span class="ts96">cp.Profile.ProfileString = </span><span class="ts99">&quot;PL100&quot;</span><span class="ts96">;</span><br /><span class="ts96">cp.Insert();</span><br /><br /><span class="ts96">MyModel.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp; M</span><span class="ts82">ouse pointer will be changed to &quot;Cross&quot;</span><img width="80" height="48" border="0" src="images/image(2).png" /></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_Pick1Obj"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PickObjectOfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function asks the user to pick a model or drawing object.</span></p>
<p class="ps22"><img width="322" height="138" border="0" src="images/image(14).png" /></p>
<p class="ps20"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model / Drawing</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PickObjectOfType&lt;T&gt;( </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps20"><span class="ts143">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Type Parameters ( in model):</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps62"><span class="ts93">Type Parameters ( in drawing):</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Drawing object type (TSD.Text, TSD.Line, TSD.Part, ...)</span></p>
<p class="ps65"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Prompt</span><span class="ts80">&nbsp;(Optional):</span><span class="ts82">&nbsp;</span><span class="ts82">The string to display as a user guidance.</span><span class="ts82">&nbsp;Default: Empty text</span><span class="ts79">&nbsp;</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Let the user to pick two parts: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart1 = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart2 = m1.PickObjectOfType&lt;Part&gt;();</span><br /><br /><span class="ts95">if</span><span class="ts96">&nbsp;(PickedPart1.GetTeklaReport(</span><span class="ts99">&quot;phase&quot;</span><span class="ts96">) == PickedPart2.GetTeklaReport(</span><span class="ts99">&quot;phase&quot;</span><span class="ts96">))</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Showing the result in the status bar:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; Operation.DisplayPrompt(</span><span class="ts99">&quot;Picked objects are in the same phase&quot;</span><span class="ts96">);</span><br /><span class="ts96">}</span><br /><span class="ts95">else</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Showing the result in the status bar:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; Operation.DisplayPrompt(</span><span class="ts99">&quot;Picked objects are in different phases&quot;</span><span class="ts96">);</span><br /><span class="ts96">}</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Let the user to pick two parts: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart1 = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart2 = m1.PickObjectOfType&lt;Part&gt;();</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;cpoints = PickedPart1.GetContourPointList().Concat(PickedPart2.GetContourPointList()).RemoveDuplicates();</span><br /><br /><span class="ts96">PolyBeam pb = </span><span class="ts95">new</span><span class="ts96">&nbsp;PolyBeam();</span><br /><span class="ts96">pb.Profile.ProfileString = PickedPart1.Profile.ProfileString;</span><br /><span class="ts96">pb.Material.MaterialString = PickedPart1.Material.MaterialString;</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;cpoints)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; pb.AddContourPoint(item);</span><br /><span class="ts96">}</span><br /><span class="ts96">pb.Insert();</span><br /><span class="ts96">PickedPart1.Delete(); PickedPart2.Delete();</span><br /><span class="ts111">//Updating model view:</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Let the user to pick two beams: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;beam1 = MyModel.PickObjectOfType&lt;Beam&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;beam2 = MyModel.PickObjectOfType&lt;Beam&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;angle = beam1.AngleWithBeam(beam2);</span><br /><span class="ts111">//Showing the result in the status bar:</span><br /><span class="ts96">Operation.DisplayPrompt(</span><span class="ts99">&quot;Angle is: &quot;</span><span class="ts96">&nbsp;+ angle + </span><span class="ts99">&quot;degree&quot;</span><span class="ts96">);</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-4 (in drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><span class="ts111">//First picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;txt1 = MyDrawing.PickObjectOfType&lt;TSD.Text&gt;();</span><br /><span class="ts111">//Another picking: </span><br /><span class="ts95">var</span><span class="ts96">&nbsp;txt2 = MyDrawing.PickObjectOfType&lt;TSD.Text&gt;();</span><br /><br /><span class="ts111">//Combining:</span><br /><span class="ts96">txt1.TextString = txt1.TextString + </span><span class="ts99">&quot; &quot;</span><span class="ts96">&nbsp;+ txt2.TextString;</span><br /><span class="ts96">txt1.Modify(); txt2.Delete();</span><br /><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts96">MyDrawing.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp; M</span><span class="ts82">ouse pointer will be changed to &quot;Cross&quot;</span><img width="80" height="48" border="0" src="images/image(2).png" /></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_PickObj"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PickObjectsOfType&lt;T&gt;&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function asks the user to pick model objects. The sequence is terminated by the middle button pick.</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps22"><img width="309" height="175" border="0" src="images/image(3).png" /></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PickObjectsOfType&lt;T&gt;( </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Type Parameters:</span></p>
<p class="ps55"><span class="ts108">T: </span><span class="ts79">Model object type (Part, Beam, Assembly, Reinforcement, ...)</span></p>
<p class="ps62"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Prompt</span><span class="ts80">&nbsp;(Optional):</span><span class="ts82">&nbsp;</span><span class="ts82">The string to display as a user guidance.</span><span class="ts82">&nbsp;Default: Empty text</span></p>
<p class="ps59"><span class="ts133">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts111">//Picking:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedBeams = m1.PickObjectsOfType&lt;Part&gt;();</span><br /><br /><span class="ts96">PolyBeam pb = </span><span class="ts95">new</span><span class="ts96">&nbsp;PolyBeam();</span><br /><span class="ts111">//Defining some properties according to first picked part:</span><br /><span class="ts96">pb.Profile.ProfileString = PickedBeams[0].Profile.ProfileString;</span><br /><span class="ts96">pb.Class = PickedBeams[0].Class;</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;PickedBeams)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;points = item.GetContourPointList();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">foreach</span><span class="ts96">&nbsp;(var node </span><span class="ts95">in</span><span class="ts96">&nbsp;points)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb.AddContourPoint(node);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Delete();</span><br /><span class="ts96">}</span><br /><span class="ts96">pb.Contour.ContourPoints = pb.Contour.ContourPoints.RemoveDuplicates();</span><br /><span class="ts96">pb.Insert();</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp; M</span><span class="ts82">ouse pointer will be changed to &quot;Cross&quot;</span><img width="80" height="48" border="0" src="images/image(2).png" /></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can also use &quot;</span><a href="idh-topic150.htm#TB1_MAINDB" class="hs7">Database</a><span class="ts79">&quot; variable to get current selected objects </span><span class="ts80">but</span><span class="ts79">&nbsp;this variable does not preserve the selecting order. So, use this function </span><span class="ts81">only</span><span class="ts79">&nbsp;when order of selection matters</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_Pick1Point"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PickPoint&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function asks the user to pick one point in model or drawing.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model / Drawing</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PickPoint( </span><span class="ts107">Precision</span><span class="ts96">&nbsp;, </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of numeric values. Min= 0, Max: 10, Default: 2</span></p>
<p class="ps55"><span class="ts108">Prompt</span><span class="ts80">&nbsp;(Optional):</span><span class="ts82">&nbsp;</span><span class="ts82">The string to display as a user guidance.</span><span class="ts82">&nbsp;Default: Empty text</span></p>
<p class="ps5"><span class="ts166">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model MyModel = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts96">var&nbsp;p = MyModel.PickPoint();</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.StartPoint = p;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts96">MyModel.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts166">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (in drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;p = MyDrawing.PickPoint();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;DrawingDatabase.OfType&lt;TSD.Line&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.StartPoint = p;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts96">MyDrawing.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp; M</span><span class="ts82">ouse pointer will be changed to &quot;Cross&quot;</span><img width="80" height="48" border="0" src="images/image(2).png" /></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_PickPoints"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;PickPoints&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function asks the user to pick points in model&nbsp; or in drawing and returns the point list. The sequence is terminated by the middle button pick.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">Model / Drawing</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.PickPoints( </span><span class="ts107">Precision</span><span class="ts96">&nbsp;, </span><span class="ts107">Prompt </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of numeric values. Min= 0, Max: 10, Default: 2</span></p>
<p class="ps55"><span class="ts108">Prompt</span><span class="ts80">&nbsp;(Optional):</span><span class="ts82">&nbsp;</span><span class="ts82">The string to display as a user guidance.</span><span class="ts82">&nbsp;Default: Empty text </span><span class="ts100">(Only in model)</span></p>
<p class="ps5"><span class="ts166">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyPickedPoints = m1.PickPoints(1); </span><span class="ts111">//Precision:1</span><br /><br /><span class="ts111">//Creating (x,y,z) list and passing to data grid:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;MyPickedPoints</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.X, n.Y, n.Z });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">or simpler:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (in model):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyPickedPoints = m1.PickPoints(1); </span><span class="ts111">//Precision:1</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyPickedPoints.GetXYZList();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3 (in drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;points = MyDrawing.PickPoints(); </span><span class="ts111">//Precision:&nbsp;default (2)</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;points</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.X, n.Y, n.Z });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">or simpler:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-4 (in drawing):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyDrawing = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSD.DrawingHandler().GetActiveDrawing();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;points = MyDrawing.PickPoints(); </span><span class="ts111">//Precision:&nbsp;default (2)</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;points.GetXYZList();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp; M</span><span class="ts82">ouse pointer will be changed to &quot;Cross&quot;</span><img width="80" height="48" border="0" src="images/image(2).png" /></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_DelimitedReader"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;ReadDelimitedData&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">It's a tiny (but strong enough) text parser that can be used for parsing valid delimited text files (*.txt, *.csv, *.dat, ...) to DataTable. Then, you can access to fields with </span><a href="idh-topic150.htm#TB1_GetField" class="hs7">GetField</a><span class="ts82">&nbsp;or </span><a href="idh-topic150.htm#TB1_Lookup" class="hs7">Lookup</a><span class="ts82">&nbsp;methods.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts82">String (data path)</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.ReadDelimitedData( </span><span class="ts107">Delimiter</span><span class="ts96">, </span><span class="ts107">RemoveIdenticalRows</span><span class="ts96">, </span><span class="ts107">CommentTokens</span><span class="ts96">, </span><span class="ts107">encoding</span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Delimiter:</span><span class="ts89">&nbsp;</span><span class="ts79">Delimiter string (</span><span class="ts88">e.g.</span><span class="ts79">&nbsp;&quot;,&quot; or &quot;;&quot; or &quot; &quot; or &quot;\t&quot; or... ).</span></p>
<p class="ps55"><span class="ts108">RemoveIdenticalRows</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Removes identical rows. Default: true </span></p>
<p class="ps55"><span class="ts108">CommentTokens</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">A string array that contains all comment tokens. Comment token indicates that the line is a comment. (Default: &quot;//&quot; )</span></p>
<p class="ps55"><span class="ts108">encoding</span><span class="ts80">&nbsp;(Optional):</span><span class="ts79">&nbsp;The character encoding to use. Default is Encoding.UTF8&nbsp; (Find more on </span><a href="https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers" target="_blank" class="hs7">MSDN</a><span class="ts79">)</span></p>
<p class="ps5"><span class="ts129">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Delimiter: </span><span class="ts167">tab</span><span class="ts116">&nbsp;. Using default values for other parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadDelimitedData(</span><span class="ts120">&quot;\t&quot;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Delimiter: </span><span class="ts167">comma</span><span class="ts116">&nbsp; and overwriting second parameter:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadDelimitedData(</span><span class="ts120">&quot;,&quot;</span><span class="ts117">, </span><span class="ts121">false</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Delimiter: </span><span class="ts167">space</span><span class="ts116">, and overwriting CommentTokens:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadDelimitedData(</span><span class="ts120">&quot; &quot;</span><span class="ts117">, CommentTokens: </span><span class="ts121">new</span><span class="ts117">&nbsp;</span><span class="ts121">string</span><span class="ts117">[2] { </span><span class="ts120">&quot;//&quot;</span><span class="ts117">, </span><span class="ts120">&quot;#&quot;</span><span class="ts117">&nbsp;})</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Delimiter: </span><span class="ts167">tab</span><span class="ts116">&nbsp;. and overwriting encoding.:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadDelimitedData(</span><span class="ts120">&quot;\t&quot;</span><span class="ts117">, encoding: Encoding.GetEncoding(1252))</span></p>
<p class="ps76">&nbsp;</p>
<p class="ps76">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;The input text file </span><span class="ts80">must</span><span class="ts79">&nbsp;have header for each column (The first row of text file will be considered as header):</span></p>
<p class="ps22"><img width="553" height="235" border="0" src="images/image(4).png" /></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;All empty column names will be ignored.</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;All duplicate column names will be ignored.</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;All empty rows will be ignored.</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;All comment rows will be ignored.</span></p>
<p class="ps0"><img width="589" height="256" border="0" src="images/image(9).png" /></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;</span><span class="ts82">If you want to get numerical value (integer or double) from </span><span class="ts85">Lookup</span><span class="ts82">&nbsp;method, You must cast the result explicitly:</span></p>
<p class="ps42"><span class="ts76">- </span><a href="idh-topic150.htm#TB1_ADouble" class="hs11">AsDouble</a><span class="ts161">(</span><span class="ts161">M</span><span class="ts162">atchValue</span><span class="ts162">)</span><span class="ts76">&nbsp;</span><span class="ts163">Recommended</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">Convert</span><span class="ts162">.</span><span class="ts162">ToDouble(</span><span class="ts162">MatchValue</span><span class="ts162">)</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">double</span><span class="ts162">.Parse(MatchValue)</span></p>
<p class="ps42"><span class="ts165">&nbsp;</span></p>
<p class="ps42"><span class="ts76">- </span><a href="idh-topic150.htm#TB1_Aint" class="hs11">AsInteger</a><span class="ts161">(</span><span class="ts161">Ma</span><span class="ts162">tchValue</span><span class="ts162">)</span><span class="ts76">&nbsp;</span><span class="ts163">Recommended</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">Convert</span><span class="ts162">.</span><span class="ts162">ToInt32(</span><span class="ts162">MatchValue</span><span class="ts162">)</span></p>
<p class="ps42"><span class="ts76">- </span><span class="ts164">int</span><span class="ts162">.Parse(MatchValue)</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Sample tab-delimited file&nbsp;path:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;path = </span><span class="ts109">@&quot;C:\Users\Me\Desktop\Beams.txt&quot;</span><span class="ts96">;</span><br /><span class="ts111">//Reading data:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;data = path.ReadDelimitedData(</span><span class="ts99">&quot;\t&quot;</span><span class="ts96">);</span><br /><br /><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(DataRow item </span><span class="ts95">in</span><span class="ts96">&nbsp;data.Rows)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">try</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beam b1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Beam();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.Material.MaterialString = </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting field by column index (starts from zero):</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.Profile.ProfileString = item.GetField(0);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Getting field by column name:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.StartPoint.X = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;X_Start&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.StartPoint.Y = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;Y_Start&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.StartPoint.Z = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;Z_Start&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.EndPoint.X = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;X_End&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.EndPoint.Y = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;Y_End&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.EndPoint.Z = </span><span class="ts76">AsDouble</span><span class="ts96">(item.GetField(</span><span class="ts99">&quot;Z_End&quot;</span><span class="ts96">));</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.Class = item.GetField(</span><span class="ts99">&quot;CLASS&quot;</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(b1.StartPoint != b1.EndPoint)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b1.Insert();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">catch</span><span class="ts96">&nbsp;(Exception) { }</span><br /><span class="ts96">}</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts82">After running, TeklaPad shows the constructed table in separate window (just for reviewing): </span></p>
<p class="ps22"><img width="387" height="214" border="0" src="images/image(7).png" /></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts115">&nbsp;</span><a name="TB1_ReadAutoCAD"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">ReadFromAutoCAD</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description: </span><span class="ts79">Converts the AutoCAD list entities (that are generated with &quot;</span><span class="ts80">LIST</span><span class="ts79">&quot; command in AutoCAD) to Tekla objects. Only works on English language pack of AutoCAD and for </span><span class="ts81">non-curved</span><span class="ts79">&nbsp;entities.</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Conversion rules:</span></p>
<p class="ps55"><span class="ts82">Line / Point </span><span class="ts168">&gt;</span><span class="ts82">&nbsp;Beam</span></p>
<p class="ps55"><span class="ts82">Open PolyLine </span><span class="ts168">&gt;</span><span class="ts82">&nbsp;PolyBeam</span></p>
<p class="ps55"><span class="ts82">Closed (and Flat) Polyline / 3D Face </span><span class="ts168">&gt;</span><span class="ts82">&nbsp;ContourPlate(s)</span></p>
<p class="ps55"><span class="ts82">Single-Line Text </span><span class="ts168">&gt;</span><span class="ts82">&nbsp;Text</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">String (Path to data or clipboard data that contains AutoCAD &quot;LIST&quot; data)</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.ReadFromAutoCAD(&nbsp;</span><span class="ts107">ScaleFactor</span><span class="ts96">, </span><span class="ts107">BeamProfile</span><span class="ts96">, </span><span class="ts107">PlateProfile</span><span class="ts96">, </span><span class="ts107">Material</span><span class="ts96">,</span><span class="ts107">&nbsp;Name</span><span class="ts96">, </span><span class="ts107">Tolerance,</span><span class="ts96">&nbsp;</span><span class="ts107">AutoInsert&nbsp; </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">ScaleFactor: </span><span class="ts79">Conversion scale factor.</span></p>
<p class="ps55"><span class="ts108">BeamProfile</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts79">&nbsp;Beam profile for 2D/3D AutoCAD entit</span><span class="ts82">ies (Leave it empty to ignore beams).&nbsp; </span><span class="ts79">Default: Empty&nbsp; </span><span class="ts148">(Updated) </span></p>
<p class="ps55"><span class="ts108">PlateProfile</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Contour plate profile (thickness) for flat and closed AutoCAD entities </span><span class="ts82">(Leave it empty to ignore plates).&nbsp; </span><span class="ts79">Default: Empty. </span><span class="ts148">(Updated) </span></p>
<p class="ps55"><span class="ts108">Material</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Material for converted objects. Default: Empty</span></p>
<p class="ps55"><span class="ts108">Name</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Name of converted objects. Default: &quot;IMPORTED&quot;</span></p>
<p class="ps55"><span class="ts108">Tolerance</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Tolerance for detecting flat 3D Faces. Min: 0, Default: 0.0002</span></p>
<p class="ps55"><span class="ts108">AutoInsert</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Automatically inserts objects into the Tekla model. Default: false </span><span class="ts148">(Updated) </span></p>
<p class="ps73"><span class="ts137">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets Tekla objects from all valid AutoCAD entity data with the given profiles for beams and plates and insert them into Tekla model:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadFromAutoCAD(</span><span class="ts117">ScaleFactor: </span><span class="ts117">1000,</span><span class="ts117">&nbsp;BeamProfile: </span><span class="ts120">&quot;IPE200&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;PlateProfile:</span><span class="ts117">&nbsp;</span><span class="ts120">&quot;10&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;AutoInsert: </span><span class="ts121">true</span><span class="ts120">&nbsp;</span><span class="ts117">)</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Gets Tekla objects from all valid AutoCAD entity data with the given profiles for beams and plates:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">ReadFromAutoCAD(1000, </span><span class="ts120">&quot;IPE200&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PL10&quot;</span><span class="ts117">)</span></p>
<p class="ps78"><span class="ts160">&nbsp;</span></p>
<p class="ps76">&nbsp;</p>
<p class="ps87"><span class="ts93">Usage guide:</span></p>
<p class="ps88"><span class="ts82">There are two ways for getting input data: </span></p>
<p class="ps88"><span class="ts87">A-</span><span class="ts82">&nbsp;Getting data from clipboard after copying (better for </span><span class="ts169">small</span><span class="ts82">&nbsp;selections).</span></p>
<p class="ps88"><span class="ts87">B-</span><span class="ts82">&nbsp;Giving path to saved text data (better for </span><span class="ts169">large</span><span class="ts82">&nbsp;selections).</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts170">Method-A:</span></p>
<p class="ps89"><span class="ts87">1)</span><span class="ts82">&nbsp;Open your AutoCAD file. Then, adjust the UCS according to your Tekla model (if needed) and select some non-curved objects:</span></p>
<p class="ps90"><span class="ts133">&nbsp;</span></p>
<p class="ps68"><img width="204" height="247" border="0" src="images/stcad1.png" /></p>
<p class="ps90"><span class="ts133">&nbsp;</span></p>
<p class="ps42"><span class="ts87">2)</span><span class="ts82">&nbsp;Type the &quot;List&quot; in AutoCAD command bar and press &quot;Enter&quot;.</span></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps76"><img width="177" height="203" border="0" src="images/scad2.png" /></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps42"><span class="ts87">3)</span><span class="ts82">&nbsp;The text data will be shown in separate window (history window). Then, copy all needed lines from history window: </span></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps76"><img width="321" height="280" border="0" src="images/scad3m.png" /></p>
<p>&nbsp;</p>
<p class="ps78"><span class="ts17">&nbsp;</span></p>
<p class="ps42"><span class="ts92">Note: </span><span class="ts82">You can re-open history window in AutoCAD by pressing &quot;F2&quot; (or CTRL + F2 )</span></p>
<p class="ps42"><span class="ts92">Note:</span><span class="ts82">&nbsp;The AutoCAD text window (history window)&nbsp; has a default of 400 lines. meaning that you can press F2 (or CTRL + F2 ) and always see the last 400 lines of whatever has scrolled by at the command line, So use this method </span><span class="ts169">only when you have a small selection</span><span class="ts82">&nbsp;in AutoCAD (That doesn't exceed the limit). (if you want to see next lines, just click on it's command field to get next block of data).</span></p>
<p class="ps43"><span class="ts19">&nbsp;</span></p>
<p class="ps43"><span class="ts18">4)</span><span class="ts19">&nbsp;</span><span class="ts82">Now the data is on your clipboard and you can call the</span><span class="ts85">&nbsp;</span><span class="ts85">ReadFromAutoCAD</span><span class="ts82">&nbsp;function over the copied data:</span></p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can adjust the Work Plane in your current Tekla model according to AutoCAD UCS </span><span class="ts82">or vice versa </span><span class="ts79">&nbsp;(if needed) before starting procedure. </span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1 (getting data from text file):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Getting data from clipboard:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;ListData = Clipboard.GetText();</span><br /><br /><span class="ts111">//Reading data as Tekla objects and inserting to model:</span><br /><span class="ts96">ListData.ReadFromAutoCAD( ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;IPE180&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;100&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span></p>
        <p class="ps42"><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<p class="ps22"><img width="259" height="227" border="0" src="images/scad4.png" /></p>
<p class="ps87">&nbsp;</p>
<p class="ps87">&nbsp;</p>
<p class="ps87">&nbsp;</p>
<p class="ps87"><span class="ts170">Method-B:</span></p>
<p class="ps89"><span class="ts87">1)</span><span class="ts82">&nbsp;Open your AutoCAD file. Then, adjust the UCS according to your Tekla model (if needed) and select some non-curved objects:</span></p>
<p class="ps90"><span class="ts17">&nbsp;</span></p>
<p class="ps68"><img width="496" height="300" border="0" src="images/mbstcad1.png" /></p>
<p class="ps90"><span class="ts17">&nbsp;</span></p>
<p class="ps42"><span class="ts87">2)</span><span class="ts82">&nbsp;Type the &quot;List&quot; in AutoCAD command bar and press &quot;Enter&quot;: </span></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps76"><img width="177" height="203" border="0" src="images/scad2.png" /></p>
<p class="ps76">&nbsp;</p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps42"><span class="ts87">3)</span><span class="ts82">&nbsp;The text data will be shown in separate window (history window). Copy the needed and visible portion of lines from history window and paste it into a text file (For example: </span><span class="ts85">My</span><span class="ts85">AutoCADListData</span><span class="ts85">.</span><span class="ts85">txt</span><span class="ts82">):</span></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps76"><img width="350" height="441" border="0" src="images/mbscad3.png" /></p>
<p class="ps41"><span class="ts133">&nbsp;</span></p>
<p class="ps42"><span class="ts92">Note:</span><span class="ts82">&nbsp;You can re-open the history window in AutoCAD by pressing &quot;F2&quot; (or CTRL + F2 )</span></p>
<p class="ps42"><span class="ts92">Note:</span><span class="ts82">&nbsp;The AutoCAD text window (history window)&nbsp; has a default of 400 lines. meaning that you can press F2 (or CTRL + F2 ) and always see the last 400 lines of whatever has scrolled by at the command line. So, if you want to see (and copy) next lines, just click on it's command field (at bottom of history window) to get next data block(s). </span></p>
<p class="ps89"><span class="ts82">&nbsp;</span></p>
<p class="ps89"><span class="ts87">4)</span><span class="ts82">&nbsp;Repeat above steps to get all other needed data and merge them into initial text file (</span><span class="ts85">My</span><span class="ts85">AutoCADListData</span><span class="ts85">.</span><span class="ts85">txt).</span><span class="ts82">&nbsp;Duplicate entities will be removed automatically during the conversion process:</span></p>
<p class="ps90"><span class="ts133">&nbsp;</span></p>
<p class="ps91"><img width="480" height="1029" border="0" src="images/mbscad3repeat.png" /></p>
<p class="ps90"><span class="ts133">&nbsp;</span></p>
<p class="ps89"><span class="ts87">5)</span><span class="ts82">&nbsp;Save the text file. Now you can call the </span><span class="ts85">ReadFromAutoCAD</span><span class="ts82">&nbsp;over that.</span></p>
<p class="ps92"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can adjust the Work Plane in your current Tekla model according to AutoCAD UCS </span><span class="ts82">or vice versa </span><span class="ts79">&nbsp;(if needed) before starting procedure. </span></p>
<p class="ps92"><span class="ts19">&nbsp;</span></p>
<p class="ps87">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2 (getting data from &quot;list&quot; file):</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Getting data from path:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;ListData = </span><span class="ts109">@&quot;C:\Users\Me\Desktop\MyAutoCADListData.txt&quot;</span><br /><br /><span class="ts111">//Reading data as Tekla objects and inserting to model:</span><br /><span class="ts96">ListData.ReadFromAutoCAD( ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;IPE180&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;100&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span></p>
        <p class="ps42"><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps22"><img width="589" height="262" border="0" src="images/mbscad4.png" /></p>
<p class="ps0">&nbsp;</p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_ReadDxfEntities"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">Read</span><span class="ts90">FromDXF&quot;</span></p>
<p class="ps54"><span class="ts91">Description:</span><span class="ts171">&nbsp;</span><span class="ts131">Converts </span><span class="ts131">the DXF entiti</span><span class="ts131">y (or collection of entities)</span><span class="ts131">&nbsp;to Tekla object</span><span class="ts131">(</span><span class="ts131">s</span><span class="ts131">), It supports AutoCad2000, AutoCad2004, AutoCad2007, AutoCad2010, AutoCad2013, and AutoCad2018 DXF database versions. </span><span class="ts104">(Powered by </span><a href="https://github.com/haplokuon/netDxf" target="_blank" class="hs9">netDxf</a><span class="ts104">&nbsp;library)</span></p>
<p class="ps5"><span class="ts133">&nbsp;</span></p>
<p class="ps22"><img width="700" height="417" border="0" src="images/dxf2tsv2.5.png" /></p>
<p class="ps0">&nbsp;</p>
<p class="ps0">&nbsp;</p>
<div class="block6" align="left">
  <table class="tbl9">
    <tr class="row0">
      <td class="cell7" colspan="3">
        <p class="ps24"><img width="40" height="40" border="0" src="images/dxflg.png" /><span class="ts172">--- Conversion Rules&nbsp; ---&gt; </span><img width="50" height="38" border="0" src="images/tslg.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell8">
        <p class="ps31"><span class="ts154">Suppoted DXF Entity</span></p>
      </td>
      <td class="cell9">
        <p class="ps31"><span class="ts154">Converted Tekla object(s)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Spline</span><span class="ts174">&nbsp;</span><span class="ts86">[1]</span></p>
        <p class="ps30"><img width="180" height="169" border="0" src="images/dxf-spline.png" /></p>
      </td>
      <td class="cell11">
        <p class="ps93"><span class="ts175">PolyBeam</span></p>
        <p class="ps30"><img width="198" height="169" border="0" src="images/ts-spline.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Ellipse</span><span class="ts86">&nbsp;[1]</span></p>
        <p class="ps30"><img width="180" height="158" border="0" src="images/dxf-ellipse.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate</span></p>
        <p class="ps30"><img width="175" height="158" border="0" src="images/ts-ellipse.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Circle</span></p>
        <p class="ps30"><img width="180" height="176" border="0" src="images/dxf-circle.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate</span></p>
        <p class="ps30"><img width="176" height="176" border="0" src="images/ts-circle.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Arc</span></p>
        <p class="ps30"><img width="180" height="133" border="0" src="images/dxf-arc.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">PolyBeam</span></p>
        <p class="ps30"><img width="222" height="133" border="0" src="images/ts-arc.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">Point</span></p>
        <p class="ps30"><img width="180" height="151" border="0" src="images/dxf-point.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Beam (with unit length)</span></p>
        <p class="ps30"><img width="154" height="151" border="0" src="images/ts-point.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Polyline (open)</span></p>
        <p class="ps30"><img width="180" height="126" border="0" src="images/dxf-open-poly.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">PolyBeam/Beam</span></p>
        <p class="ps30"><img width="193" height="126" border="0" src="images/ts-open-poly.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell10">
        <p class="ps93"><span class="ts173">Polyline (closed &amp; flat)</span></p>
        <p class="ps30"><img width="180" height="178" border="0" src="images/dxf-close-poly.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate</span></p>
        <p class="ps30"><img width="156" height="178" border="0" src="images/ts-close-poly.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">3D Face</span><span class="ts86">&nbsp;[2]</span></p>
        <p class="ps30"><img width="180" height="124" border="0" src="images/dxf-3dface.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate(s)</span></p>
        <p class="ps30"><img width="172" height="124" border="0" src="images/ts-3dface.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">Polyface mesh</span></p>
        <p class="ps30"><img width="180" height="113" border="0" src="images/dxf-pfacemesh.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate(s)</span></p>
        <p class="ps30"><img width="150" height="113" border="0" src="images/ts-pfacemesh.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">Mesh</span><span class="ts86">&nbsp;[3]</span></p>
        <p class="ps30"><img width="180" height="146" border="0" src="images/dxf-mesh.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate(s)</span></p>
        <p class="ps30"><img width="160" height="146" border="0" src="images/ts-mesh.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">Solid</span><span class="ts86">&nbsp;[4]</span></p>
        <p class="ps30"><img width="180" height="88" border="0" src="images/dxf-solid-th.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Contour Plate</span></p>
        <p class="ps30"><img width="193" height="88" border="0" src="images/ts-solid-th2.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell13">
        <p class="ps93"><span class="ts173">Text (single-line)</span></p>
        <p class="ps94"><span class="ts176">&nbsp;</span></p>
        <p class="ps30"><img width="180" height="60" border="0" src="images/dxf-sltext.png" /></p>
      </td>
      <td class="cell12">
        <p class="ps93"><span class="ts175">Text</span></p>
        <p class="ps30"><img width="161" height="100" border="0" src="images/ts-text.png" /></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell14" colspan="2">
        <p class="ps42"><span class="ts86">[1]</span><span class="ts80">&nbsp;</span><span class="ts79">You can get more nodes by increasing &quot;</span><a href="idh-topic150.htm#TB1_SegProp" class="hs7">Segments</a><span class="ts79">&quot; parame</span><span class="ts82">ter (only for Spline, Elliptic arc and Ellipse). Please note that f</span><span class="ts82">rom TS2017i onwards, the </span><span class="ts82">limitation</span><span class="ts82">&nbsp;has been increased from 100 to 1000</span><span class="ts82">.</span></p>
        <p class="ps42"><span class="ts86">[2]</span><span class="ts80">&nbsp;</span><span class="ts79">Non planar 3D-Faces are automatically divided into two triangular contour plates. </span><span class="ts82">The accuracy of triangulation is controlled by</span><span class="ts79">&nbsp;&quot;</span><a href="idh-topic150.htm#TB1_TolParam" class="hs7">Tolerance</a><span class="ts79">&quot; parameter (reduce it to get more triangular plates).</span></p>
        <p class="ps42"><span class="ts86">[3] </span><span class="ts79">Only non-smooth (Level-0) meshes are supported. If you have smooth meshes, explode that first (to get 3D-Faces) before exporting.</span></p>
        <p class="ps42"><span class="ts86">[4] </span><span class="ts79">Solid thickness is automatically calculated by multiplying the &quot;Thickness&quot; property (in DXF file) by the &quot;</span><a href="idh-topic150.htm#TB1_ScaleParam" class="hs7">ScaleFactor</a><span class="ts79">&quot; parameter. zero-thickness solids will be export with &quot;</span><a href="idh-topic150.htm#TB1_PProfParam" class="hs7">PlateProfile</a><span class="ts79">&quot; parameter.</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps73"><span class="ts177">&nbsp;</span></p>
<p class="ps57"><span class="ts91">Target type:</span><span class="ts79">&nbsp;String (DXF file path) / </span><span class="ts79">netDxf.</span><span class="ts80">DxfDocument</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;netDxf.</span><span class="ts80">DxfObject</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;netDxf.Entities.</span><span class="ts80">EntityObject</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">netDxf.Entities.</span><span class="ts80">EntityObject</span></p>
<p class="ps86"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.ReadFromDXF(</span><span class="ts107">&nbsp;ScaleFactor, BeamProfile, PlateProfile, Material,&nbsp;Name, Segments, Tolerance, VisibilityCheck, AutoInsert&nbsp;</span><span class="ts96">)</span></p>
<p class="ps20"><span class="ts143">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><a name="TB1_ScaleParam"></a><span class="ts108">ScaleFactor: </span><span class="ts79">Conversion scale factor.</span></p>
<p class="ps55"><span class="ts108">BeamProfile </span><span class="ts80">(Optional)</span><span class="ts108">:</span><span class="ts79">&nbsp;Beam profile for 2D/3D DXF entity/entit</span><span class="ts82">ies (Leave it empty to ignore beams).&nbsp; </span><span class="ts79">Default: Empty</span></p>
<p class="ps55"><a name="TB1_PProfParam"></a><span class="ts108">PlateProfile </span><span class="ts80">(Optional):</span><span class="ts89">&nbsp;</span><span class="ts79">Contour plate profile (thickness) for flat and closed DXF entity/entities (</span><span class="ts82">Leave it empty to ignore plates). </span><span class="ts79">Default: Empty</span></p>
<p class="ps55"><span class="ts108">Material</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Material for converted object(s). Default: Empty</span></p>
<p class="ps55"><span class="ts108">Name</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Name of converted object(s). Default: &quot;IMPORTED&quot;</span></p>
<p class="ps55"><a name="TB1_SegProp"></a><span class="ts108">Segments</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Number</span><span class="ts82">&nbsp;of nodes. </span><span class="ts79">Min: 0, Default: 40 </span><span class="ts116">(only for Spline, Elliptic arc and Ellipse)</span></p>
<p class="ps55"><a name="TB1_TolParam"></a><span class="ts108">Tolerance</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Tolerance for detecting flat 3D faces. Min: 0, Default: 0.0002</span></p>
<p class="ps55"><span class="ts108">VisibilityCheck</span><span class="ts80">&nbsp;(Optional): </span><span class="ts82">Only reads visible </span><span class="ts79">entity/</span><span class="ts82">entities in DXF file. Default: true</span></p>
<p class="ps55"><span class="ts108">AutoInsert</span><span class="ts80">&nbsp;(Optional)</span><span class="ts108">:</span><span class="ts89">&nbsp;</span><span class="ts79">Automatically inserts object(s) into the Tekla model. Default: false </span></p>
<p class="ps73"><span class="ts137">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Reads visible DXF entities as Tekla objects with the given profiles for beams and plates and insert them to Tekla model:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Read</span><span class="ts117">DxfEntities</span><span class="ts117">(</span><span class="ts117">ScaleFactor: </span><span class="ts117">1000,</span><span class="ts117">&nbsp;BeamProfile: </span><span class="ts120">&quot;</span><span class="ts120">PL1</span><span class="ts120">00</span><span class="ts120">*100</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;PlateProfile:</span><span class="ts117">&nbsp;</span><span class="ts120">&quot;10&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;AutoInsert: </span><span class="ts121">true</span><span class="ts120">&nbsp;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Read</span><span class="ts117">DxfEntities</span><span class="ts117">(1000, </span><span class="ts120">&quot;</span><span class="ts120">PL1</span><span class="ts120">00</span><span class="ts120">*100</span><span class="ts120">&quot;</span><span class="ts117">, </span><span class="ts120">&quot;PL10&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;AutoInsert: </span><span class="ts121">true</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Reads visible DXF entities as Tekla objects (and ignore plates) and insert them to Tekla model:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Read</span><span class="ts117">DxfEntities</span><span class="ts117">(</span><span class="ts117">ScaleFactor: </span><span class="ts117">1000,</span><span class="ts117">&nbsp;BeamProfile: </span><span class="ts120">&quot;IPE200&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;Segments: 20,&nbsp;AutoInsert: </span><span class="ts121">true</span><span class="ts120">&nbsp;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps75"><span class="ts116">Reads visible DXF entities as Tekla objects:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Read</span><span class="ts117">DxfEntities</span><span class="ts117">(</span><span class="ts117">ScaleFactor: </span><span class="ts117">1000,</span><span class="ts117">&nbsp;BeamProfile: </span><span class="ts120">&quot;IPE200&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;Material: </span><span class="ts120">&quot;</span><span class="ts120">S235JR</span><span class="ts120">&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;Segments: 20</span><span class="ts120">&nbsp;</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Reads </span><span class="ts167">all</span><span class="ts116">&nbsp;DXF entities as Tekla objects with the given name (and ignore beams).</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">Read</span><span class="ts117">DxfEntities</span><span class="ts117">(</span><span class="ts117">ScaleFactor: </span><span class="ts117">1000,</span><span class="ts117">&nbsp;PlateProfile:</span><span class="ts117">&nbsp;</span><span class="ts120">&quot;10&quot;</span><span class="ts117">,</span><span class="ts117">&nbsp;Material: </span><span class="ts120">&quot;</span><span class="ts120">S235JR</span><span class="ts120">&quot;</span><span class="ts117">, VisibilityCheck: </span><span class="ts121">false</span><span class="ts117">,&nbsp;AutoInsert: </span><span class="ts121">true</span><span class="ts120">&nbsp;</span><span class="ts117">)</span></p>
<p class="ps78"><span class="ts160">&nbsp;</span></p>
<p class="ps87"><span class="ts93">Usage guide:</span></p>
<p class="ps88"><span class="ts82">There are two ways for reading DXF data as Tekla objects: </span></p>
<p class="ps88"><span class="ts87">A-</span><span class="ts82">&nbsp;Reading entities from DXF file path.</span></p>
<p class="ps88"><span class="ts87">B-</span><span class="ts82">&nbsp;Reading entities by loading as netDxf.DxfDocument.</span></p>
<p class="ps87"><span class="ts178">&nbsp;</span></p>
<p class="ps87"><span class="ts170">Method-A:</span><span class="ts153">&nbsp;</span></p>
<p class="ps92"><span class="ts82">In this method, you can read all DXF entities at once but there is no control on individual entity types or properties (layer, color, etc)</span></p>
<p class="ps87"><span class="ts179">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1: Inserting all visible DXF Entities to Tekla model</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;path = </span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">;</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">path.ReadFromDXF( ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56"><span class="ts179">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2: Inserting all DXF Entities to Tekla model</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;path = </span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">;</span><br /><br /><span class="ts111">//Reading DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">path.ReadFromDXF( ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, VisibilityCheck: </span><span class="ts95">false</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56"><span class="ts179">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3: Reading all visible DXF Entities to Tekla model and ignoring beams</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;path = </span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">;</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects:</span><br /><span class="ts96">path.ReadFromDXF( ScaleFactor: 1000, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<p><span class="ts170">Method-B:</span><span class="ts153">&nbsp;</span></p>
<p class="ps42"><span class="ts82">In this method, you must first load your DXF file to </span><span class="ts87">DxfDocument</span><span class="ts82">&nbsp;and then do the reading process as before (but with many more options). After loading, you can also get collection of all entities (Read more </span><a href="idh-topic150.htm#TB1_AllEntities" class="hs7">here</a><span class="ts82">&nbsp;).</span></p>
<p class="ps41"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1: Inserting all visible DXF Entities to Tekla model (Similar to Method-A)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF file:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">MyDxfFile.ReadFromDXF(ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2: Inserting all visible DXF entities in Layer1 (Property filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF file:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities(FromLayer: </span><span class="ts99">&quot;Layer1&quot;</span><span class="ts96">);</span><br /><span class="ts111">//or: entities = from n in MyDxfFile.AllEntities() where n.Layer.Name == &quot;Layer1&quot; select n;</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">entities.ReadFromDXF(ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3: Inserting visible DXF Ellipses to Tekla model (Type filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF file:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.Ellipses;</span><br /><span class="ts111">//or: entities = MyDxfFile.AllEntities().OfType&lt;netDxf.Entities.Ellipse&gt;();</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">entities.ReadFromDXF(ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, Segments:50, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-4: Inserting all visible circles with red color (Type and property filtering)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF file:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><br /><span class="ts95">var</span><span class="ts96">&nbsp;entities = </span><span class="ts95">from</span><span class="ts96">&nbsp;n in MyDxfFile.Circles </span><span class="ts95">where </span><span class="ts113">n.</span><span class="ts96">Color.</span><span class="ts76">Equals(AciColor.Red)</span><span class="ts96">&nbsp;</span><span class="ts95">select </span><span class="ts96">n;</span><br /><br /><span class="ts111">//Reading visible DXF entities (with required parameters) as Tekla objects and inserting them to model:</span><br /><span class="ts96">entities.ReadFromDXF(ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">, AutoInsert: </span><span class="ts95">true</span><span class="ts96">&nbsp;);</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-5: Changing the properties separately before insertion</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Loading DXF file:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyDxfFile = DxfDocument.Load(</span><span class="ts109">@&quot;D:\Drawing.dxf&quot;</span><span class="ts96">);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;entities = MyDxfFile.AllEntities();</span><br /><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;entities)</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Reading visible DXF entities separately:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">var</span><span class="ts96">&nbsp;TeklaObjects = item.ReadFromDXF(ScaleFactor: 1000, BeamProfile: </span><span class="ts99">&quot;D100&quot;</span><span class="ts96">, PlateProfile: </span><span class="ts99">&quot;10&quot;</span><span class="ts96">, Material: </span><span class="ts99">&quot;S235JR&quot;</span><span class="ts96">);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Make changes to converted objects</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts95">foreach</span><span class="ts96">&nbsp;(var obj </span><span class="ts95">in</span><span class="ts96">&nbsp;TeklaObjects)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">if</span><span class="ts96">&nbsp;(obj != </span><span class="ts95">null</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.Name = </span><span class="ts99">&quot;Layer: &quot;</span><span class="ts96">&nbsp;+ item.Layer.Name;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.Class = </span><span class="ts99">&quot;6&quot;</span><span class="ts96">;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Inserting manually after modifications:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.Insert();</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts96">}</span><br /><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<p class="ps66"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can adjust the Work Plane in your current Tekla model according to DXF's UCS </span><span class="ts82">or vice versa </span><span class="ts79">&nbsp;(if needed) before starting procedure. </span></p>
<p class="ps66"><span class="ts134">&nbsp;</span></p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps56"><a name="TB1_RebList"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">R</span><span class="ts90">ebarList&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts82">Gets rebar list for the part</span><span class="ts82">, cast-unit and rebar-assembly</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Part&nbsp;/ Assembly</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.RebarList()</span></p>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1: For Parts</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;p </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;p.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;r.IsGeometryValid()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;r </span><span class="ts95">by</span><span class="ts96">&nbsp;r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">) </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Keeping the first object from each group of data:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;rebar = g.First()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Defining required columns:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Pos = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Size = rebar.GetTeklaReport(</span><span class="ts99">&quot;size&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalWeight = g.Sum(x =&gt; x.WeightInGroup())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalLength = g.Sum(x =&gt; x.LengthInGroup())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;No = g.Sum(x =&gt; x.GetNumberOfRebars())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Pos, Size, No, TotalLength, TotalWeight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2: For Cast-Units and/or Rebar Assemblies</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyQuery = </span><span class="ts95">from</span><span class="ts96">&nbsp;a </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Assembly&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;a.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;r.IsGeometryValid()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">group</span><span class="ts96">&nbsp;r </span><span class="ts95">by</span><span class="ts96">&nbsp;r.GetTeklaReport(</span><span class="ts99">&quot;rebar pos&quot;</span><span class="ts96">) </span><span class="ts95">into</span><span class="ts96">&nbsp;g</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Keeping the first object from each group of data:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;rebar = g.First()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Defining required columns:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Pos = g.Key</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Size = rebar.GetTeklaReport(</span><span class="ts99">&quot;size&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalWeight = g.Sum(x =&gt; x.WeightInGroup())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalLength = g.Sum(x =&gt; x.LengthInGroup())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;No = g.Sum(x =&gt; x.GetNumberOfRebars())</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Pos, Size, No, TotalLength, TotalWeight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;MyQuery;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps56">&nbsp;</p>
<div class="block3">
  <div class="hline0"></div>
</div>
<p class="ps87"><a name="TB1_RDups"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">RemoveDuplicates</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Removes duplicates from a collection. </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;ModelObject&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">Point</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">ContourPoint</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ ArrayList / </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">netDxf.Entities.Point</span><span class="ts79">&gt;</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.RemoveDuplicates( </span><span class="ts107">Precision </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of coordinates for comparision. Default= 2, Min= 0, Max=15 </span><span class="ts116">(Only for coordinates)</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_PRound"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;Round&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts82">&nbsp;</span><span class="ts82">Rounds&nbsp;coordinates </span><span class="ts82">(or fractional values) </span><span class="ts82">to a specified number of fractional digits.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Point / ContourPoint / netDxf.Entities.Point / </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">Point</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">ContourPoint</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/&nbsp; </span><span class="ts79">IEnumerable&lt;</span><span class="ts79">netDxf.Entities.Point</span><span class="ts79">&gt;</span><span class="ts79">&nbsp;/ double</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.Round( </span><span class="ts107">Precision </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of coordinates. Default= 2, Min= 0, Max=15</span></p>
<p class="ps59"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;PickedPart = m1.PickObjectOfType&lt;Part&gt;();</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;points = PickedPart.GetPointList();</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;points.Round(4).GetXYZList();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts96">Model m1 = </span><span class="ts95">new</span><span class="ts96">&nbsp;Model();</span><br /><span class="ts95">foreach</span><span class="ts96">&nbsp;(var item </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;())</span><br /><span class="ts96">{</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.StartPoint = item.StartPoint.Round(0);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.EndPoint = item.EndPoint.Round(0);</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; item.Modify();</span><br /><span class="ts96">}</span><br /><span class="ts111">//Updating the model view:</span><br /><span class="ts96">m1.CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps87"><a name="TB1_WP2Global"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;SetToGlobalWorkPlane&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function takes the model instance and resets the work plane to global. Returns &quot;true&quot; in successful transformation or &quot;false&quot; in unsuccessful transformation.</span></p>
<p class="ps43"><span class="ts91">Acts on type:</span><span class="ts105">&nbsp;</span><span class="ts79">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.SetToGlobalWorkPlane()</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_WP2Local"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;SetToLocalWorkPlaneOf&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function takes the model object and changes the work plane to the given part's local coordinate system. Returns &quot;true&quot; in successful transformation or &quot;false&quot; in unsuccessful transformation.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.SetToLocalWorkPlaneOf( </span><span class="ts107">ModelObj </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">ModelObj:</span><span class="ts89">&nbsp;</span><span class="ts79">Model object.</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_WP"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;SetToWorkPlane&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">This function takes the model instance and changes the work plane to the given transformation plane. Returns &quot;true&quot; in successful transformation or &quot;false&quot; in unsuccessful transformation.</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Model</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.SetToWorkPlane( </span><span class="ts107">TPlane </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">TPlane:</span><span class="ts89">&nbsp;</span><span class="ts79">Defined transformation plane.</span></p>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_WGroup"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">WeightInGroup</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Returns total weight of rebar group (also works for tapered groups). </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">Reinforcement</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.WeightInGroup( </span><span class="ts107">Precision </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Precision</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Precision of result. Default= 2, Min= 0, Max=9</span></p>
<p class="ps59"><span class="ts17">&nbsp;</span></p>
<p class="ps60"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">from</span><span class="ts96">&nbsp;r </span><span class="ts95">in</span><span class="ts96">&nbsp;n.RebarList()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;Size = r.GetTeklaReport(</span><span class="ts99">&quot;size&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;UnitWeight = r.IsTapered() ? </span><span class="ts99">&quot;VAR&quot;</span><span class="ts96">&nbsp;: r.GetTeklaReport(</span><span class="ts99">&quot;weight&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">let</span><span class="ts96">&nbsp;TotalWeight = r.WeightInGroup()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ Size, UnitWeight, TotalWeight };</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts115">&nbsp;</span><a name="TB1_Write"></a><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">WriteOnModel</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Writes the given text on model. </span></p>
<p class="ps43"><span class="ts134">&nbsp;</span></p>
<p class="ps22"><img width="218" height="131" border="0" src="images/image(6).png" /></p>
<p class="ps20"><span class="ts17">&nbsp;</span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">String / </span><span class="ts79">StringBuilder</span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.WriteOnModel( </span><span class="ts107">Location</span><span class="ts96">, </span><span class="ts107">TextColor</span><span class="ts96">, </span><span class="ts107">SpaceBetweenLines</span><span class="ts96">, </span><span class="ts107">Top </span><span class="ts96">)</span></p>
<p class="ps0"><span class="ts93">Parameters:</span></p>
<p class="ps55"><span class="ts108">Location:</span><span class="ts89">&nbsp;</span><span class="ts79">Insertion point in Tekla model.</span></p>
<p class="ps55"><span class="ts108">TextColor</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Text color. Default: Blue (0,0,1)</span></p>
<p class="ps55"><span class="ts108">SpaceBetweenLines</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Space between lines. Default: 200</span></p>
<p class="ps55"><span class="ts108">Top</span><span class="ts80">&nbsp;(Optional): </span><span class="ts79">Vertical text alignment. Default = true (Bottom: false)</span></p>
<p class="ps5"><span class="ts180">&nbsp;</span></p>
<p class="ps0"><span class="ts93">Syntax guide:</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Specifying insertion point and using default values for other parameters:</span></p>
<p class="ps64"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">WriteOnModel(</span><span class="ts121">new</span><span class="ts117">&nbsp;Point(0, 1000, 1500))</span></p>
<p class="ps64"><span class="ts118">&nbsp;</span></p>
<p class="ps63"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Specifying insertion point and overwriting other parameters:</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">WriteOnModel(</span><span class="ts121">new</span><span class="ts117">&nbsp;Point(0, 1000, 1500), </span><span class="ts121">new</span><span class="ts117">&nbsp;TSMUI.Color(1, 0, 0), 150, </span><span class="ts121">false</span><span class="ts117">)</span></p>
<p class="ps75"><span class="ts118">&nbsp;</span></p>
<p class="ps74"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><span class="ts116">Specifying insertion point and overwriting line spacing:</span><span class="ts181">&nbsp;</span></p>
<p class="ps75"><span class="ts106">{Target}</span><span class="ts117">.</span><span class="ts117">WriteOnModel(Location: </span><span class="ts121">new</span><span class="ts117">&nbsp;Point(0, 1000, 1500), SpaceBetweenLines: 150)</span></p>
<p class="ps38"><span class="ts17">&nbsp;</span></p>
<p class="ps79"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Defigning needed parameters:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;InsertionPoint = </span><span class="ts95">new</span><span class="ts96">&nbsp;Point(0, 0, 50);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyColor = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSMUI.Color(1, 0, 1);</span><br /><br /><span class="ts111">//Defining a text</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyLabelContent = </span><span class="ts95">new</span><span class="ts96">&nbsp;StringBuilder();</span><br /><span class="ts96">MyLabelContent.AppendLine(</span><span class="ts99">&quot;First line of text&quot;</span><span class="ts96">);</span><br /><span class="ts96">MyLabelContent.AppendLine(</span><span class="ts99">&quot;Second line of text&quot;</span><span class="ts96">);</span><br /><span class="ts96">MyLabelContent.AppendLine(</span><span class="ts99">&quot;Third line of text&quot;</span><span class="ts96">);</span><br /><span class="ts111">//Writing the text on model:</span><br /><span class="ts96">MyLabelContent.WriteOnModel(InsertionPoint, MyColor);</span><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts111">//Defigning needed parameters:</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;InsertionPoint = </span><span class="ts95">new</span><span class="ts96">&nbsp;Point(0, 0, 0);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyColor = </span><span class="ts95">new</span><span class="ts96">&nbsp;TSMUI.Color(1, 1, 0);</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;space = 400;</span><br /><br /><span class="ts111">//Defining a text</span><br /><span class="ts95">var</span><span class="ts96">&nbsp;MyLabelContent =</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts99">&quot;First line of text&quot;</span><span class="ts96">&nbsp;+ Environment.NewLine +</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts99">&quot;Second line of text&quot;</span><span class="ts96">&nbsp;+ Environment.NewLine +</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp; </span><span class="ts99">&quot;Third line of text&quot;</span><span class="ts96">&nbsp;+ Environment.NewLine;</span><br /><span class="ts111">//Writing the text on model:</span><br /><span class="ts96">MyLabelContent.WriteOnModel(InsertionPoint, MyColor, space);</span><br /><span class="ts111">//Updating the drawing view:</span><br /><span class="ts95">new</span><span class="ts96">&nbsp;Model().CommitChanges();</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<p class="ps43"><span class="ts92">Note:</span><span class="ts79">&nbsp;You can clear all texts on model with: Right-Click &gt; Redraw View.</span></p>
<p class="ps5"><span class="ts65">&nbsp;</span></p>
<div class="block1">
  <div class="hline0"></div>
</div>
<p class="ps0"><a name="TB1_ZFit"></a><span class="ts115">&nbsp;</span><img width="25" height="25" border="0" src="images/exclusive.png" /><span class="ts90">&quot;</span><span class="ts90">ZoomToFit</span><span class="ts90">&quot;</span></p>
<p class="ps43"><span class="ts91">Description:</span><span class="ts100">&nbsp;</span><span class="ts79">Zooms in on current selected objects or on the given part/assembly list (only works in model area). </span></p>
<p class="ps43"><span class="ts91">Target type:</span><span class="ts105">&nbsp;</span><span class="ts79">IEnumerable&lt;ModelObject&gt;</span><span class="ts79">&nbsp;/ Model </span></p>
<p class="ps0"><span class="ts93">Syntax:</span></p>
<p class="ps46"><span class="ts96">&nbsp;</span><span class="ts106">{Target}</span><span class="ts96">.ZoomToFit()</span></p>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<p class="ps52"><span class="ts93">Usage samples:</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-1:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.Class != </span><span class="ts99">&quot;3&quot;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.GetTeklaReport(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">) &gt; 6000</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n;</span><br /><br /><span class="ts96">Query.Highlight().ZoomToFit();</span><br /><span class="ts111">//return Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-2:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;Query = </span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.Class != </span><span class="ts99">&quot;3&quot;</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.GetTeklaReport(</span><span class="ts99">&quot;length net&quot;</span><span class="ts96">) &gt; 6000</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n;</span><br /><br /><span class="ts96">Query.ZoomToFit();</span><br /><span class="ts111">//return Query;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps5"><span class="ts17">&nbsp;</span></p>
<div class="block3" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-3:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;MyCollection = (</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;Database.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.GetTeklaReport(</span><span class="ts99">&quot;weight net&quot;</span><span class="ts96">) &gt;= 100</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.StartPoint.Z &gt; 3000 &amp;&amp; n.EndPoint.X &gt; 1000</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">where</span><span class="ts96">&nbsp;n.Profile.ProfileString.StartsWith(</span><span class="ts99">&quot;HEA&quot;</span><span class="ts96">)</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts111">//Hint: Don't use new{...} because it changes the original type:</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;n).Highlight().ZoomToFit();</span><br /><br /><span class="ts111">//Showing some data on data grid:</span><br /><span class="ts95">return</span><span class="ts96">&nbsp;(</span><span class="ts95">from</span><span class="ts96">&nbsp;n </span><span class="ts95">in</span><span class="ts96">&nbsp;MyCollection.OfType&lt;Beam&gt;()</span><br /><span class="ts96">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts95">select</span><span class="ts96">&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;{ n.StartPoint, n.EndPoint });</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps67"><span class="ts17">&nbsp;</span></p>
<div class="block1" align="left">
  <table class="tbl8">
    <tr class="row0">
      <td class="cell0">
        <p class="ps49"><span class="ts94">Sample-4:</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell2">
        <p class="ps42"><span class="ts95">var</span><span class="ts96">&nbsp;SelectedObjects =&nbsp;</span><span class="ts95">new</span><span class="ts96">&nbsp;Model().ZoomToFit();</span></p>
        <p class="ps42"><span class="ts111">//return SelectedObjects;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0">&nbsp;</p>
<div class="block4">
  <div class="hline0"></div>
</div>
</body>
</html>